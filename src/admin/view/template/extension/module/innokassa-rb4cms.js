(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>o});var i=n(537),r=n.n(i),s=n(645),a=n.n(s)()(r());a.push([e.id,'\n.innokassa-receipt-builder {\n    border: 1px solid #aaa;\n    width: 100%;\n    margin: auto;\n    background-color: #fff;\n    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;\n    border-bottom: 1px solid #ccc;\n    padding-bottom: 10px;\n}\n\n/**/\n\n.innokassa-receipt-builder .wrap-outer {\n    padding: 10px 15px;\n}\n\n.innokassa-receipt-builder .wrap-dummy {\n    margin-top: 10px;\n}\n\n/**/\n\n.innokassa-receipt-builder h1 {\n    font-size: 24px;\n    background-color: rgba(0,0,0,0.1);\n    text-align: center;\n    padding: 10px 2px;\n    margin: 0px;\n}\n\n.innokassa-receipt-builder h2 {\n    font-size: 20px;\n    background-color: rgba(0,0,0,0.05);\n    text-align: center;\n    padding: 5px 2px;\n    margin: 0px;\n}\n\n/**/\n\n.innokassa-receipt-builder label {\n    color: #777;\n}\n\n.innokassa-receipt-builder select {\n    border-radius: 0;\n    border: 0;\n    border: 1px solid #aaa;\n    background-color: rgba(255,255,255,0.7);\n}\n\n.innokassa-receipt-builder input {\n    border: 1px solid #aaa;\n}\n\n.innokassa-receipt-builder input.name {\n    width: 100%;\n}\n\n.innokassa-receipt-builder input.price {\n    width: 96px;\n}\n\n.innokassa-receipt-builder input.quantity {\n    width: 64px;\n}\n\n.innokassa-receipt-builder button.btn-send, .innokassa-receipt-builder button.btn-cancel {\n    padding: 5px 10px;\n    margin-right: 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.innokassa-receipt-builder button.btn-send {\n    background-color: #1abc9c;\n}\n\n.innokassa-receipt-builder button.btn-cancel {\n    background-color: #ecf0f1;\n}\n\n/**/\n\n.innokassa-receipt-builder .line, .line-printable, .line-summary {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n    justify-content: space-between;\n    margin-top: 5px;\n}\n\n.innokassa-receipt-builder .line-printable {\n    font-size: 14px;\n}\n\n.innokassa-receipt-builder .line-summary {\n    align-items: flex-end;\n    justify-content: flex-end;\n}\n\n/**/\n\n.innokassa-receipt-builder .positions {\n    background-color: rgba(0,0,0,0.01);\n}\n\n.innokassa-receipt-builder .position {\n    margin: 5px 0;\n    padding: 20px 0 5px 0;\n    background-color: rgba(0,0,0,0.05);\n}\n\n.innokassa-receipt-builder .btn-remove {\n    cursor: pointer;\n    background-color: rgba(0,0,0,0.1);\n    font-size: 16px;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    position: relative;\n    left: 3px;\n    top: 28px;\n    margin-top: -20px;\n}\n\n.innokassa-receipt-builder .btn-add {\n    cursor: pointer;\n    background-color: rgba(0,0,0,0.15);\n    font-size: 16px;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    top: 28px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:";AACA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,wDAAwD;IACxD,6BAA6B;IAC7B,oBAAoB;AACxB;;AAEA,GAAG;;AAEH;IACI,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;AACpB;;AAEA,GAAG;;AAEH;IACI,eAAe;IACf,iCAAiC;IACjC,kBAAkB;IAClB,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,eAAe;IACf,kCAAkC;IAClC,kBAAkB;IAClB,gBAAgB;IAChB,WAAW;AACf;;AAEA,GAAG;;AAEH;IACI,WAAW;AACf;;AAEA;IACI,gBAAgB;IAChB,SAAS;IACT,sBAAsB;IACtB,uCAAuC;AAC3C;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA,GAAG;;AAEH;IACI,aAAa;IACb,mBAAmB;IACnB,qBAAqB;IACrB,8BAA8B;IAC9B,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,yBAAyB;AAC7B;;AAEA,GAAG;;AAEH;IACI,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,kCAAkC;AACtC;;AAEA;IACI,eAAe;IACf,iCAAiC;IACjC,eAAe;IACf,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,SAAS;IACT,SAAS;IACT,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,kCAAkC;IAClC,eAAe;IACf,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,SAAS;AACb",sourcesContent:['\n.innokassa-receipt-builder {\n    border: 1px solid #aaa;\n    width: 100%;\n    margin: auto;\n    background-color: #fff;\n    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;\n    border-bottom: 1px solid #ccc;\n    padding-bottom: 10px;\n}\n\n/**/\n\n.innokassa-receipt-builder .wrap-outer {\n    padding: 10px 15px;\n}\n\n.innokassa-receipt-builder .wrap-dummy {\n    margin-top: 10px;\n}\n\n/**/\n\n.innokassa-receipt-builder h1 {\n    font-size: 24px;\n    background-color: rgba(0,0,0,0.1);\n    text-align: center;\n    padding: 10px 2px;\n    margin: 0px;\n}\n\n.innokassa-receipt-builder h2 {\n    font-size: 20px;\n    background-color: rgba(0,0,0,0.05);\n    text-align: center;\n    padding: 5px 2px;\n    margin: 0px;\n}\n\n/**/\n\n.innokassa-receipt-builder label {\n    color: #777;\n}\n\n.innokassa-receipt-builder select {\n    border-radius: 0;\n    border: 0;\n    border: 1px solid #aaa;\n    background-color: rgba(255,255,255,0.7);\n}\n\n.innokassa-receipt-builder input {\n    border: 1px solid #aaa;\n}\n\n.innokassa-receipt-builder input.name {\n    width: 100%;\n}\n\n.innokassa-receipt-builder input.price {\n    width: 96px;\n}\n\n.innokassa-receipt-builder input.quantity {\n    width: 64px;\n}\n\n.innokassa-receipt-builder button.btn-send, .innokassa-receipt-builder button.btn-cancel {\n    padding: 5px 10px;\n    margin-right: 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.innokassa-receipt-builder button.btn-send {\n    background-color: #1abc9c;\n}\n\n.innokassa-receipt-builder button.btn-cancel {\n    background-color: #ecf0f1;\n}\n\n/**/\n\n.innokassa-receipt-builder .line, .line-printable, .line-summary {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n    justify-content: space-between;\n    margin-top: 5px;\n}\n\n.innokassa-receipt-builder .line-printable {\n    font-size: 14px;\n}\n\n.innokassa-receipt-builder .line-summary {\n    align-items: flex-end;\n    justify-content: flex-end;\n}\n\n/**/\n\n.innokassa-receipt-builder .positions {\n    background-color: rgba(0,0,0,0.01);\n}\n\n.innokassa-receipt-builder .position {\n    margin: 5px 0;\n    padding: 20px 0 5px 0;\n    background-color: rgba(0,0,0,0.05);\n}\n\n.innokassa-receipt-builder .btn-remove {\n    cursor: pointer;\n    background-color: rgba(0,0,0,0.1);\n    font-size: 16px;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    position: relative;\n    left: 3px;\n    top: 28px;\n    margin-top: -20px;\n}\n\n.innokassa-receipt-builder .btn-add {\n    cursor: pointer;\n    background-color: rgba(0,0,0,0.15);\n    font-size: 16px;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    top: 28px;\n}\n'],sourceRoot:""}]);const o=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,r,s){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(i)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);i&&a[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(r," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var s={},a=[],o=0;o<e.length;o++){var l=e[o],c=i.base?l[0]+i.base:l[0],u=s[c]||0,p="".concat(c," ").concat(u);s[c]=u+1;var d=n(p),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(A);else{var h=r(A,i);i.byIndex=o,t.splice(o,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var s=i(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<s.length;a++){var o=n(s[a]);t[o].references--}for(var l=i(e,r),c=0;c<s.length;c++){var u=n(s[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}s=l}}},569:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{class e{rootElement=null;callbackUpdate=null;remove(){this.rootElement.remove(),this.rootElement=null}callUpdate(...e){this.callbackUpdate&&this.callbackUpdate(...e)}getRender(e=null){return e&&(this.callbackUpdate=e),null}}class t extends Error{}class i{static build(e,n,i=null){const r=document.createElement(e);return n&&Object.keys(n).forEach((e=>{if(!(e in r))throw new t(`missing prop "${e}" into ${r}`);r[e]=n[e]})),i&&i.append(r),r}static buildDiv(e,t=null){return i.build("div",e,t)}static buildInput(e,t=null){return i.build("input",e,t)}static buildSelect(e,t=null,n=null){const r=i.build("select",e,n);return t&&t.forEach((e=>{i.build("option",e,r)})),r}}class r extends Error{}class s{static isValid(e){return Object.keys(this.getDesc()).includes(`${e}`)}static getDesc(){throw new r}static getRender(e,t,n=null){const r=[],s=this.getDesc();Object.entries(s).forEach((([t,n])=>{r.push({value:t,textContent:n,selected:e===parseInt(t,10)})}));const a=i.buildSelect({className:"select",onchange:()=>{t(a.value)}},r,n);return a}}class a extends s{static getDesc(){return{1:"Предоплата 100%",2:"Предоплата",3:"Аванс",4:"Полный расчет",5:"Частичный расчет и кредит",6:"Передача в кредит",7:"Оплата кредита"}}}class o extends s{static getDesc(){return{1:"Товар",3:"Работа",4:"Услуга",10:"Платеж"}}}class l extends s{static getDesc(){return{1:"НДС 20%",2:"НДС 10%",3:"НДС 20/120",4:"НДС 10/110",5:"НДС 0%",6:"НДС не облагается"}}}class c extends e{constructor(){super(),this.type=1,this.name="Название товара",this.price=1e3,this.quantity=1,this.vat=6,this.paymentMethod=4,this.inputs=[]}setType(e){return this.type=e,this}getType(){return this}setName(e){return this.name=e,this}getName(){return this.name}setPrice(e){return this.price=parseFloat(e).toFixed(2),this}getPrice(){return this.price}setQuantity(e){return this.quantity=parseFloat(e).toFixed(3),this}getQuantity(){return this.quantity}getAmount(){return parseFloat(this.price+this.quantity).toFixed(2)}setVat(e){return this.vat=e,this}getVat(){return this}setPaymentMethod(e){return this.paymentMethod=e,this}getPaymentMethod(){return this.paymentMethod}getRender(e=null){super.getRender(e);const t=this,n=i.buildDiv({className:"position"}),r=i.buildDiv({className:"line"},n);this.inputName=i.buildInput({className:"name",title:"Название позиции",placeholder:"Название позиции",minLength:1,maxLength:128,required:!0,type:"text",value:this.name,onchange:()=>{t.setName(t.inputName.value)}},r),this.inputs.push(this.inputName);const s=i.buildDiv({className:"line"},n);this.inputPrice=i.buildInput({className:"price",title:"Цена за единицу товара",placeholder:"Цена",type:"number",required:!0,step:"0.01",value:this.price,onchange:()=>{t.setPrice(t.inputPrice.value),t.callUpdate()}},s),this.inputs.push(this.inputPrice),this.inputQuantity=i.buildInput({className:"quantity",title:"Количество предметов",placeholder:"Кол-во",type:"number",required:!0,step:"0.01",value:this.quantity,onchange:()=>{t.setQuantity(t.inputQuantity.value),t.callUpdate()}},s),this.inputs.push(this.inputQuantity),l.getRender(this.vat,(e=>{t.setVat(e)}),s);const c=i.buildDiv({className:"line"},n);return a.getRender(this.paymentMethod,(e=>{t.setPaymentMethod(e)}),c),o.getRender(this.type,(e=>{t.setType(e)}),c),this.rootElement=n,this.rootElement}getRawObject(){return{type:this.type,name:this.name,price:this.price,quantity:this.quantity,amount:this.getAmount(),vat:this.vat,payment_method:this.paymentMethod}}reportValidity(){let e=!0;return this.inputs.forEach((t=>{t.reportValidity()||(e=!1)})),e}}class u extends s{static getDesc(){return{1:"Приход",2:"Возврат прихода",3:"Расход",4:"Возврат расхода"}}}class p extends s{static getDesc(){return{0:"Ручной чек",1:"Предоплата",2:"Полный расче"}}}class d extends Error{}class A extends e{constructor(){super(),this.uuid="",this.href="",this.type=1,this.subType=1,this.amount=0,this.date=""}setLink(e,t){return this.uuid=e,this.href=t,this}setType(e){if(!u.isValid(e))throw new d(`excpected ${Object.keys(u.getDesc()).join(", ")}, but get ${e}`);return this.type=e,this}getType(){return this.type}setSubType(e){if(!p.isValid(e))throw new d(`expected ${Object.keys(p.getDesc()).join(", ")}, but get ${e}`);return this.subType=e,this}setAmount(e){return this.amount=e,this}getAmount(){return this.amount}setDate(e){return this.date=e,this}getRender(e=null){super.getRender(e);const t=i.buildDiv({className:"line-printable"});return i.build("a",{className:"receipt-link",textContent:this.uuid,href:this.href,target:"blank"},t),i.buildDiv({textContent:p.getDesc()[this.type]},t),i.buildDiv({textContent:`${this.amount} руб.`},t),i.buildDiv({textContent:this.date},t),this.rootElement=t,this.rootElement}}class h extends e{static id=0;stroage=new Map;[Symbol.iterator](){return this.stroage.entries()}controlType(e){throw new r}add(e){this.controlType(e);const{id:t}=h;return this.stroage.set(t,e),h.id+=1,t}remove(e){this.stroage.delete(e)}get(e){return this.stroage.get(e)}size(){return this.stroage.size}getRender(){const e=i.buildDiv({className:"wrap-outer"});return this.stroage.forEach((t=>{e.append(t.getRender())})),e}}class b extends h{controlType(e){if(!(e instanceof c))throw new d}getAmount(){let e=0;return this.stroage.forEach((t=>{e+=t.getPrice()*t.getQuantity()})),parseFloat(e).toFixed(2)}getRender(e=null){super.getRender(e),this.rootElement=i.buildDiv({className:"wrap-dummy"}),i.build("h2",{className:"",textContent:"Список позиций"},this.rootElement);const t=i.buildDiv({className:"line-summary"},this.rootElement);i.build("label",{className:"label",textContent:"Сумма:"},t);const n=i.build("label",{className:"label",textContent:this.getAmount()},t),r=i.buildDiv({className:"positions"},this.rootElement),s=this,a=()=>{n.textContent=s.getAmount()},o=(e,t)=>{const n=i.buildDiv({className:"btn-remove",textContent:"×",onclick:()=>{s.stroage.delete(e),n.remove(),t.remove(),a()}},r);r.append(t.getRender(a))};return this.stroage.forEach(((e,t)=>{o(t,e)})),i.buildDiv({className:"btn-add",textContent:"+",onclick:()=>{const e=s.add(new c),t=s.stroage.get(e);o(e,t),a()}},this.rootElement),this.rootElement}getRawArray(){const e=[];return this.stroage.forEach((t=>{e.push(t.getRawObject())})),e}reportValidity(){let e=!0;return this.stroage.forEach((t=>{t.reportValidity()||(e=!1)})),e}}class m extends e{constructor(){super(),this.items=new b,this.email="",this.phone="",this.type=1,this.orderId="0",this.inputs=[]}setOrderId(e){return this.orderId=e,this}getOrderId(){return this.orderId}setType(e){if(!u.isValid(e))throw new d(`excpected ${Object.keys(u.getDesc()).join(", ")}, but get ${e}`);return this.type=e,this}getType(){return this.type}getItems(){return this.items}setEmail(e){return this.email=e,this}getEmail(){return this.email}setPhone(e){return this.phone=e,this}getPhone(){return this.phone}getRenderContacts(){const e=i.buildDiv({className:"wrap-dummy"}),t=i.buildDiv({className:"line"},e);i.build("label",{className:"label",textContent:"Email:"},t);const n=i.buildInput({className:"input",type:"email",required:!0,placeholder:"box@domain.zone",value:this.email,onchange:()=>{this.setEmail(n.value)}},t);this.inputs.push(n);const r=i.buildDiv({className:"line"},e);i.build("label",{className:"label",textContent:"Телефон:"},r);const s=i.buildInput({className:"input",type:"tel",required:!0,placeholder:"+7-123-456-78-99",minLength:10,maxLength:15,value:this.phone,onchange:()=>{this.setPhone(s.value)}},r);return this.inputs.push(s),e}getRender(e=null){super.getRender(e);const t=i.buildDiv({className:"wrap-outer"});return this.rootElement=t,t.append(this.getRenderContacts()),t.append(this.items.getRender()),this.rootElement}getRawObject(){return{type:this.type,email:this.email,phone:this.phone,items:this.items.getRawArray()}}reportValidity(){let e=!0;return this.inputs.forEach((t=>{t.reportValidity()||(e=!1)})),e?this.items.reportValidity():e}}class g extends h{controlType(e){if(!(e instanceof A))throw new d}getBalance(){let e=0;return this.stroage.forEach((t=>{1===t.getType()?e+=t.getAmount():2===t.getType()&&(e-=t.getAmount())})),parseFloat(e).toFixed(2)}getRender(e=null){super.getRender(e),this.rootElement=super.getRender();const t=i.buildDiv({className:"line-summary"},this.rootElement);i.build("label",{className:"label",textContent:"Баланс:"},t),i.build("label",{className:"label",textContent:this.getBalance()},t);const n=i.build("h2",{className:"",textContent:"Все чеки заказа"});return this.rootElement.prepend(n),this.rootElement}}var f=n(379),x=n.n(f),C=n(795),y=n.n(C),k=n(569),I=n.n(k),v=n(565),B=n.n(v),E=n(216),w=n.n(E),N=n(589),R=n.n(N),D=n(426),T={};T.styleTagTransform=R(),T.setAttributes=B(),T.insert=I().bind(null,"head"),T.domAPI=y(),T.insertStyleElement=w(),x()(D.Z,T),D.Z&&D.Z.locals&&D.Z.locals,window.innokassa={ReceiptBuilder:class{constructor({element:e,receiptType:t=1,canHeaderRender:n=!0}){if(!(e instanceof HTMLElement))throw new d;this.element=e,this.receipt=new m,this.receipt.setType(t),this.printables=new g,this.fnSend=null,this.fnClose=null,this.canHeaderRender=n}getReceipt(){return this.receipt}getPrintables(){return this.printables}getHeader(){return`Новый чек ${1===this.receipt.getType()?"прихода":"возврата"} заказа #${this.receipt.getOrderId()}`}setCallbackSend(e){return this.fnSend=e,this}setCallbackClose(e){return this.fnClose=e,this}render(){this.element.innerHTML="";const e=i.buildDiv({className:"innokassa-receipt-builder"});this.element.append(e),this.canHeaderRender&&i.build("h1",{className:"",textContent:this.getHeader()},e),e.append(this.receipt.getRender());const t=i.buildDiv({className:"wrap-outer"},e);i.build("button",{className:"btn-send",textContent:"Отправить",onclick:()=>{this.fnSend&&this.fnSend()}},t),i.build("button",{className:"btn-cancel",textContent:"Отменить",onclick:()=>{this.fnClose&&this.fnClose()}},t),e.append(this.printables.getRender())}},ReceiptItem:c,Printable:A}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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S0FDZDVQLEtBQUs2UCxRQUFVLEtBQ2Y3UCxLQUFLd1AsZ0JBQWtCQSxFQVMzQk0sYUFDSSxPQUFPOVAsS0FBSzBQLFFBT2hCSyxnQkFDSSxPQUFPL1AsS0FBSzJQLFdBU2hCSyxZQUNJLE1BQU8sYUFBd0MsSUFBM0JoUSxLQUFLMFAsUUFBUTVGLFVBQWtCLFVBQVksc0JBQXNCOUosS0FBSzBQLFFBQVFsQixlQVV0R3lCLGdCQUFnQkMsR0FFWixPQURBbFEsS0FBSzRQLE9BQVNNLEVBQ1BsUSxLQVFYbVEsaUJBQWlCRCxHQUViLE9BREFsUSxLQUFLNlAsUUFBVUssRUFDUmxRLEtBU1hvUSxTQUNJcFEsS0FBSzRFLFFBQVF5TCxVQUFZLEdBRXpCLE1BQU1DLEVBQWlCN0ksRUFBZXFELFNBQVMsQ0FDM0NoQyxVQUFXLDhCQUVmOUksS0FBSzRFLFFBQVFtRCxPQUFPdUksR0FFaEJ0USxLQUFLd1AsaUJBRUwvSCxFQUFlTyxNQUNYLEtBQ0EsQ0FDSWMsVUFBVyxHQUNYSixZQUFhMUksS0FBS2dRLGFBRXRCTSxHQUtSQSxFQUFldkksT0FBTy9ILEtBQUswUCxRQUFRbkksYUFHbkMsTUFBTWdKLEVBQU85SSxFQUFlcUQsU0FDeEIsQ0FDSWhDLFVBQVcsY0FFZndILEdBR0o3SSxFQUFlTyxNQUNYLFNBQ0EsQ0FDSWMsVUFBVyxXQUNYSixZQUFhLFlBQ2JxRixRQUFTLEtBQ0QvTixLQUFLNFAsUUFDTDVQLEtBQUs0UCxXQUlqQlcsR0FHSjlJLEVBQWVPLE1BQ1gsU0FDQSxDQUNJYyxVQUFXLGFBQ1hKLFlBQWEsV0FDYnFGLFFBQVMsS0FDRC9OLEtBQUs2UCxTQUNMN1AsS0FBSzZQLFlBSWpCVSxHQUlKRCxFQUFldkksT0FBTy9ILEtBQUsyUCxXQUFXcEksZUR6STFDNEIsWUFBVyxFQUNYaUQsVUFBUyxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWRrLWpzLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9tZGstanMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL21kay1qcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL21kay1qcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9tZGstanMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL21kay1qcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9tZGstanMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vbWRrLWpzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vbWRrLWpzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vbWRrLWpzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21kay1qcy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9tZGstanMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL21kay1qcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL21kay1qcy8uL3NyYy9CYXNlUmVuZGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9tZGstanMvLi9zcmMvRXhjZXB0aW9ucy9NaXNzaW5nUHJvcEV4Y2VwdGlvbi5qcyIsIndlYnBhY2s6Ly9tZGstanMvLi9zcmMvRWxlbWVudEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vbWRrLWpzLy4vc3JjL0V4Y2VwdGlvbnMvTm90SW1wbGVtZW50ZWRFeGNlcHRpb24uanMiLCJ3ZWJwYWNrOi8vbWRrLWpzLy4vc3JjL0F0b21zL0Jhc2VBdG9tLmpzIiwid2VicGFjazovL21kay1qcy8uL3NyYy9BdG9tcy9QYXltZW50TWV0aG9kLmpzIiwid2VicGFjazovL21kay1qcy8uL3NyYy9BdG9tcy9SZWNlaXB0SXRlbVR5cGUuanMiLCJ3ZWJwYWNrOi8vbWRrLWpzLy4vc3JjL0F0b21zL1ZhdC5qcyIsIndlYnBhY2s6Ly9tZGstanMvLi9zcmMvRW50aXRpZXMvUmVjZWlwdEl0ZW0uanMiLCJ3ZWJwYWNrOi8vbWRrLWpzLy4vc3JjL0F0b21zL1JlY2VpcHRUeXBlLmpzIiwid2VicGFjazovL21kay1qcy8uL3NyYy9BdG9tcy9SZWNlaXB0U3ViVHlwZS5qcyIsIndlYnBhY2s6Ly9tZGstanMvLi9zcmMvRXhjZXB0aW9ucy9JbnZhbGlkQXJndW1lbnRFeGNlcHRpb24uanMiLCJ3ZWJwYWNrOi8vbWRrLWpzLy4vc3JjL0VudGl0aWVzL1ByaW50YWJsZS5qcyIsIndlYnBhY2s6Ly9tZGstanMvLi9zcmMvQ29sbGVjdGlvbnMvQmFzZUNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWRrLWpzLy4vc3JjL0NvbGxlY3Rpb25zL1JlY2VpcHRJdGVtQ29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZGstanMvLi9zcmMvRW50aXRpZXMvUmVjZWlwdC5qcyIsIndlYnBhY2s6Ly9tZGstanMvLi9zcmMvQ29sbGVjdGlvbnMvUHJpbnRhYmxlQ29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZGstanMvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vbWRrLWpzLy4vc3JjL3Byb2QuanMiLCJ3ZWJwYWNrOi8vbWRrLWpzLy4vc3JjL1JlY2VpcHRCdWlsZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYWFhO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgbWFyZ2luOiBhdXRvO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgICBmb250LWZhbWlseTogXFxcIkhlbHZldGljYSBOZXVlXFxcIixIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNjY2M7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcbn1cXG5cXG4vKiovXFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgLndyYXAtb3V0ZXIge1xcbiAgICBwYWRkaW5nOiAxMHB4IDE1cHg7XFxufVxcblxcbi5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIC53cmFwLWR1bW15IHtcXG4gICAgbWFyZ2luLXRvcDogMTBweDtcXG59XFxuXFxuLyoqL1xcblxcbi5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIGgxIHtcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuMSk7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgcGFkZGluZzogMTBweCAycHg7XFxuICAgIG1hcmdpbjogMHB4O1xcbn1cXG5cXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciBoMiB7XFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjA1KTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBwYWRkaW5nOiA1cHggMnB4O1xcbiAgICBtYXJnaW46IDBweDtcXG59XFxuXFxuLyoqL1xcblxcbi5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIGxhYmVsIHtcXG4gICAgY29sb3I6ICM3Nzc7XFxufVxcblxcbi5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIHNlbGVjdCB7XFxuICAgIGJvcmRlci1yYWRpdXM6IDA7XFxuICAgIGJvcmRlcjogMDtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjcpO1xcbn1cXG5cXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciBpbnB1dCB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNhYWE7XFxufVxcblxcbi5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIGlucHV0Lm5hbWUge1xcbiAgICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgaW5wdXQucHJpY2Uge1xcbiAgICB3aWR0aDogOTZweDtcXG59XFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgaW5wdXQucXVhbnRpdHkge1xcbiAgICB3aWR0aDogNjRweDtcXG59XFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgYnV0dG9uLmJ0bi1zZW5kLCAuaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciBidXR0b24uYnRuLWNhbmNlbCB7XFxuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgYnV0dG9uLmJ0bi1zZW5kIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFhYmM5YztcXG59XFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgYnV0dG9uLmJ0bi1jYW5jZWwge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWNmMGYxO1xcbn1cXG5cXG4vKiovXFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgLmxpbmUsIC5saW5lLXByaW50YWJsZSwgLmxpbmUtc3VtbWFyeSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBtYXJnaW4tdG9wOiA1cHg7XFxufVxcblxcbi5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIC5saW5lLXByaW50YWJsZSB7XFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgLmxpbmUtc3VtbWFyeSB7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG59XFxuXFxuLyoqL1xcblxcbi5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIC5wb3NpdGlvbnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuMDEpO1xcbn1cXG5cXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciAucG9zaXRpb24ge1xcbiAgICBtYXJnaW46IDVweCAwO1xcbiAgICBwYWRkaW5nOiAyMHB4IDAgNXB4IDA7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsMC4wNSk7XFxufVxcblxcbi5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIC5idG4tcmVtb3ZlIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuMSk7XFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgICB3aWR0aDogMjBweDtcXG4gICAgaGVpZ2h0OiAyMHB4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgbGVmdDogM3B4O1xcbiAgICB0b3A6IDI4cHg7XFxuICAgIG1hcmdpbi10b3A6IC0yMHB4O1xcbn1cXG5cXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciAuYnRuLWFkZCB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjE1KTtcXG4gICAgZm9udC1zaXplOiAxNnB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgIHdpZHRoOiAyMHB4O1xcbiAgICBoZWlnaHQ6IDIwcHg7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgdG9wOiAyOHB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUFDQTtJQUNJLHNCQUFzQjtJQUN0QixXQUFXO0lBQ1gsWUFBWTtJQUNaLHNCQUFzQjtJQUN0Qix3REFBd0Q7SUFDeEQsNkJBQTZCO0lBQzdCLG9CQUFvQjtBQUN4Qjs7QUFFQSxHQUFHOztBQUVIO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBLEdBQUc7O0FBRUg7SUFDSSxlQUFlO0lBQ2YsaUNBQWlDO0lBQ2pDLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsV0FBVztBQUNmOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGtDQUFrQztJQUNsQyxrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLFdBQVc7QUFDZjs7QUFFQSxHQUFHOztBQUVIO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxzQkFBc0I7SUFDdEIsdUNBQXVDO0FBQzNDOztBQUVBO0lBQ0ksc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQSxHQUFHOztBQUVIO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixxQkFBcUI7SUFDckIsOEJBQThCO0lBQzlCLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0kscUJBQXFCO0lBQ3JCLHlCQUF5QjtBQUM3Qjs7QUFFQSxHQUFHOztBQUVIO0lBQ0ksa0NBQWtDO0FBQ3RDOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHFCQUFxQjtJQUNyQixrQ0FBa0M7QUFDdEM7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsaUNBQWlDO0lBQ2pDLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsV0FBVztJQUNYLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLFNBQVM7SUFDVCxTQUFTO0lBQ1QsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGtDQUFrQztJQUNsQyxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLFNBQVM7QUFDYlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNhYWE7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtYXJnaW46IGF1dG87XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1xcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjYztcXG4gICAgcGFkZGluZy1ib3R0b206IDEwcHg7XFxufVxcblxcbi8qKi9cXG5cXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciAud3JhcC1vdXRlciB7XFxuICAgIHBhZGRpbmc6IDEwcHggMTVweDtcXG59XFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgLndyYXAtZHVtbXkge1xcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xcbn1cXG5cXG4vKiovXFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgaDEge1xcbiAgICBmb250LXNpemU6IDI0cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsMC4xKTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBwYWRkaW5nOiAxMHB4IDJweDtcXG4gICAgbWFyZ2luOiAwcHg7XFxufVxcblxcbi5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIGgyIHtcXG4gICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuMDUpO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHBhZGRpbmc6IDVweCAycHg7XFxuICAgIG1hcmdpbjogMHB4O1xcbn1cXG5cXG4vKiovXFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgbGFiZWwge1xcbiAgICBjb2xvcjogIzc3NztcXG59XFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgc2VsZWN0IHtcXG4gICAgYm9yZGVyLXJhZGl1czogMDtcXG4gICAgYm9yZGVyOiAwO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYWFhO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuNyk7XFxufVxcblxcbi5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIGlucHV0IHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcXG59XFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgaW5wdXQubmFtZSB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciBpbnB1dC5wcmljZSB7XFxuICAgIHdpZHRoOiA5NnB4O1xcbn1cXG5cXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciBpbnB1dC5xdWFudGl0eSB7XFxuICAgIHdpZHRoOiA2NHB4O1xcbn1cXG5cXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciBidXR0b24uYnRuLXNlbmQsIC5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIGJ1dHRvbi5idG4tY2FuY2VsIHtcXG4gICAgcGFkZGluZzogNXB4IDEwcHg7XFxuICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciBidXR0b24uYnRuLXNlbmQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWFiYzljO1xcbn1cXG5cXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciBidXR0b24uYnRuLWNhbmNlbCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlY2YwZjE7XFxufVxcblxcbi8qKi9cXG5cXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciAubGluZSwgLmxpbmUtcHJpbnRhYmxlLCAubGluZS1zdW1tYXJ5IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIG1hcmdpbi10b3A6IDVweDtcXG59XFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgLmxpbmUtcHJpbnRhYmxlIHtcXG4gICAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG5cXG4uaW5ub2thc3NhLXJlY2VpcHQtYnVpbGRlciAubGluZS1zdW1tYXJ5IHtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbn1cXG5cXG4vKiovXFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgLnBvc2l0aW9ucyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsMC4wMSk7XFxufVxcblxcbi5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIC5wb3NpdGlvbiB7XFxuICAgIG1hcmdpbjogNXB4IDA7XFxuICAgIHBhZGRpbmc6IDIwcHggMCA1cHggMDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjA1KTtcXG59XFxuXFxuLmlubm9rYXNzYS1yZWNlaXB0LWJ1aWxkZXIgLmJ0bi1yZW1vdmUge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsMC4xKTtcXG4gICAgZm9udC1zaXplOiAxNnB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgIHdpZHRoOiAyMHB4O1xcbiAgICBoZWlnaHQ6IDIwcHg7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBsZWZ0OiAzcHg7XFxuICAgIHRvcDogMjhweDtcXG4gICAgbWFyZ2luLXRvcDogLTIwcHg7XFxufVxcblxcbi5pbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyIC5idG4tYWRkIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuMTUpO1xcbiAgICBmb250LXNpemU6IDE2cHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gICAgd2lkdGg6IDIwcHg7XFxuICAgIGhlaWdodDogMjBweDtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICB0b3A6IDI4cHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8qKiDQkdCw0LfQvtCy0YvQuSDQvtCx0YrQtdC60YIg0YDQtdC90LTQtdGA0LAgKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VSZW5kZXJhYmxlIHtcbiAgICAvKipcbiAgICAgKiDQmtC+0YDQvdC10LLQvtC5L9Cz0LvQsNCy0L3Ri9C5INGN0LvQtdC80LXQvdGCINC+0LHRitC10LrRgtCwXG4gICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICByb290RWxlbWVudCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiDQntCx0YDQsNCx0L7RgtGH0LjQuiDQvtCx0L3QvtCy0LvQtdC90LjRjyDRjdC70LXQvNC10L3RgtCwXG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBjYWxsYmFja1VwZGF0ZSA9IG51bGw7XG5cbiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxuICAgIC8qKlxuICAgICAqINCj0LTQsNC70LXQvdC40LUgcm9vdEVsZW1lbnRcbiAgICAgKi9cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGNhbGxVcGRhdGUoLi4uYXJncykge1xuICAgICAgICBpZiAodGhpcy5jYWxsYmFja1VwZGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5jYWxsYmFja1VwZGF0ZSguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQuNGC0Ywg0YDQtdC90LTQtdGAINC+0LHRitC10LrRgtCwICjQutC+0YDQvdC10LLQvtC5IEhUTUxFbGVtZW50KVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb258bnVsbH0gY2FsbGJhY2tVcGRhdGVcbiAgICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAgICovXG4gICAgZ2V0UmVuZGVyKGNhbGxiYWNrVXBkYXRlID0gbnVsbCkge1xuICAgICAgICBpZiAoY2FsbGJhY2tVcGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tVcGRhdGUgPSBjYWxsYmFja1VwZGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1pc3NpbmdQcm9wRXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuXG59XG4iLCJpbXBvcnQgTWlzc2luZ1Byb3BFeGNlcHRpb24gZnJvbSAnLi9FeGNlcHRpb25zL01pc3NpbmdQcm9wRXhjZXB0aW9uJztcblxuLyoqINCk0LDQsdGA0LjQutCwINC00LvRjyBET00g0Y3Qu9C10LzQtdC90YLQvtCyICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVtZW50RmFjdG9yeSB7XG4gICAgLyoqXG4gICAgICog0KHQvtC30LTQsNC90LjQtSBIVE1MRWxlbWVudFxuICAgICAqIEB0aHJvd3Mge01pc3NpbmdQcm9wRXhjZXB0aW9ufSDQtdGB0LvQuCDRgdCy0L7QudGB0YLQstCwINCyIG9wdGlvbnMg0L3QtdGCINCyINGB0L7Qt9C00LDQstCw0LXQvNC+0LwgSFRNTEVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnINGC0LXQs1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fG51bGx9IG9wdGlvbnMg0YHQstC+0LnRgdGC0LLQsCDRgdC+0LfQtNCw0LLQsNC10LzQvtCz0L4gSFRNTEVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fG51bGx9IHBhcmVudCDRgNC+0LTQuNGC0LXQu9GMLCDQuiDQutC+0YLQvtGA0L7QvNGDINC90YPQttC90L4g0L/RgNC40YHQvtC10LTQuNC90LjRgtGMXG4gICAgICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAgICAqL1xuICAgIHN0YXRpYyBidWlsZCh0YWcsIG9wdGlvbnMsIHBhcmVudCA9IG51bGwpIHtcbiAgICAgICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcblxuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ1Byb3BFeGNlcHRpb24oYG1pc3NpbmcgcHJvcCBcIiR7a2V5fVwiIGludG8gJHtlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgcGFyZW50LmFwcGVuZChlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cblxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gICAgLyoqXG4gICAgICog0KHQvtC30LTQsNC90LjQtSBIVE1MRGl2RWxlbWVudFxuICAgICAqIEBzZWUgRWxlbWVudEZhY3RvcnkjYnVpbGRcbiAgICAgKiBAdGhyb3dzIHtNaXNzaW5nUHJvcEV4Y2VwdGlvbn1cbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxudWxsfSBwYXJlbnRcbiAgICAgKiBAcmV0dXJucyB7SFRNTERpdkVsZW1lbnR9XG4gICAgICovXG4gICAgc3RhdGljIGJ1aWxkRGl2KG9wdGlvbnMsIHBhcmVudCA9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIEVsZW1lbnRGYWN0b3J5LmJ1aWxkKCdkaXYnLCBvcHRpb25zLCBwYXJlbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCh0L7Qt9C00LDQvdC40LUgSFRNTElucHV0RWxlbWVudFxuICAgICAqIEBzZWUgRWxlbWVudEZhY3RvcnkjYnVpbGRcbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxudWxsfSBwYXJlbnRcbiAgICAgKiBAcmV0dXJucyB7SFRNTElucHV0RWxlbWVudH1cbiAgICAgKi9cbiAgICBzdGF0aWMgYnVpbGRJbnB1dChvcHRpb25zLCBwYXJlbnQgPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBFbGVtZW50RmFjdG9yeS5idWlsZCgnaW5wdXQnLCBvcHRpb25zLCBwYXJlbnQpO1xuICAgIH1cblxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gICAgLyoqXG4gICAgICog0KHQvtC30LTQsNC90LjQtSBIVE1MU2VsZWN0RWxlbWVudFxuICAgICAqIEBzZWUgRWxlbWVudEZhY3RvcnkjYnVpbGRcbiAgICAgKiBAdGhyb3dzIHtNaXNzaW5nUHJvcEV4Y2VwdGlvbn1cbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSBvcHRpb25zXG4gICAgICogQHBhcmFtIHthcnJheX0gY2hpbGRzINC80LDRgdGB0LjQsiDQvtCx0YrQtdC60YLQvtCyINGBIG9wdGlvbnMg0LTQu9GPINC00L7Rh9C10YDQvdC40YUg0Y3Qu9C10LzQtdC90YLQvtCyIEhUTUxPcHRpb25FbGVtZW50XG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxudWxsfSBwYXJlbnRcbiAgICAgKiBAcmV0dXJucyB7SFRNTFNlbGVjdEVsZW1lbnR9XG4gICAgICovXG4gICAgc3RhdGljIGJ1aWxkU2VsZWN0KG9wdGlvbnMsIGNoaWxkcyA9IG51bGwsIHBhcmVudCA9IG51bGwpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ID0gRWxlbWVudEZhY3RvcnkuYnVpbGQoJ3NlbGVjdCcsIG9wdGlvbnMsIHBhcmVudCk7XG5cbiAgICAgICAgaWYgKGNoaWxkcykge1xuICAgICAgICAgICAgY2hpbGRzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBFbGVtZW50RmFjdG9yeS5idWlsZCgnb3B0aW9uJywgaXRlbSwgc2VsZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlbGVjdDtcbiAgICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcblxufVxuIiwiaW1wb3J0IE5vdEltcGxlbWVudGVkRXhjZXB0aW9uIGZyb20gJy4uL0V4Y2VwdGlvbnMvTm90SW1wbGVtZW50ZWRFeGNlcHRpb24nO1xuaW1wb3J0IEVsZW1lbnRGYWN0b3J5IGZyb20gJy4uL0VsZW1lbnRGYWN0b3J5JztcblxuLyoqINCR0LDQt9C+0LLRi9C5INC60LvQsNGB0YEg0LTQu9GPINCw0YLQvtC80L7QsiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZUF0b20ge1xuICAgIC8qKlxuICAgICAqINCf0YDQvtCy0LXRgNC60LAg0LfQvdCw0YfQtdC90LjRjyDQvdCwINCy0LDQu9C40LTQvdC+0YHRgtGMINCyINC60L7QvdGC0LXQutGB0YLQtSDRjdGC0L7Qs9C+INCw0YLQvtC80LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2x9XG4gICAgICovXG4gICAgc3RhdGljIGlzVmFsaWQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChPYmplY3Qua2V5cyh0aGlzLmdldERlc2MoKSkuaW5jbHVkZXMoYCR7dmFsdWV9YCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQuNGC0Ywg0L7QsdGK0LXQutGCINC+0L/QuNGB0LDQvdC40Y8g0L/RgNC40LzQuNGC0LjQstCwXG4gICAgICogQHJldHVybnMge29iamVjdH0g0LPQtNC1INC60LvRjtGHINGH0LjRgdC70L7QstC+0LUg0LfQvdCw0YfQtdC90LjQtSwg0LAg0LfQvdCw0YfQtdC90LjQtSDQv9GA0LXQtNGB0YLQsNCy0LvQtdC90L4g0YHRgtGA0L7QutC+0LLRi9C8INC+0L/QuNGB0LDQvdC40LXQvFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXREZXNjKCkge1xuICAgICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFeGNlcHRpb24oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LjRgtGMINGA0LXQvdC00LXRgFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyVmFsdWUg0YLQtdC60YPRidC10LUg0LfQvdCw0YfQtdC90LjQtVxuICAgICAqIEBwYXJhbSB7Kn0gY2FsbGJhY2tVcGRhdGUg0L7QsdGA0LDQsdC+0YLRh9C40Log0YHQvtCx0YvRgtC40Y8g0L7QsdC90L7QstC70LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fG51bGx9IHBhcmVudCDRgNC+0LTQuNGC0LXQu9GM0YHQutC40Lkg0Y3Qu9C10LzQtdC90YIgKNC60YPQtNCwINCw0L/Qv9C10L3QtNC40YLRjClcbiAgICAgKiBAcmV0dXJucyB7SFRNTFNlbGVjdEVsZW1lbnR9XG4gICAgICovXG4gICAgc3RhdGljIGdldFJlbmRlcihjdXJyVmFsdWUsIGNhbGxiYWNrVXBkYXRlLCBwYXJlbnQgPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGEgPSBbXTtcbiAgICAgICAgY29uc3QgbyA9IHRoaXMuZ2V0RGVzYygpO1xuXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG8pLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgYS5wdXNoKHtcbiAgICAgICAgICAgICAgICB2YWx1ZToga2V5LFxuICAgICAgICAgICAgICAgIHRleHRDb250ZW50OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogKGN1cnJWYWx1ZSA9PT0gcGFyc2VJbnQoa2V5LCAxMCkpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHNlbGVjdCA9IEVsZW1lbnRGYWN0b3J5LmJ1aWxkU2VsZWN0KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAgb25jaGFuZ2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tVcGRhdGUoc2VsZWN0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBwYXJlbnQsXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHNlbGVjdDtcbiAgICB9XG59XG4iLCJpbXBvcnQgQmFzZUF0b20gZnJvbSAnLi9CYXNlQXRvbSc7XG5cbi8qKiDQn9GA0LjQt9C90LDQuiDRgdC/0L7RgdC+0LHQsCDRgNCw0YHRh9C10YLQsCAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5bWVudE1ldGhvZCBleHRlbmRzIEJhc2VBdG9tIHtcbiAgICBzdGF0aWMgZ2V0RGVzYygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIDE6ICfQn9GA0LXQtNC+0L/Qu9Cw0YLQsCAxMDAlJyxcbiAgICAgICAgICAgIDI6ICfQn9GA0LXQtNC+0L/Qu9Cw0YLQsCcsXG4gICAgICAgICAgICAzOiAn0JDQstCw0L3RgScsXG4gICAgICAgICAgICA0OiAn0J/QvtC70L3Ri9C5INGA0LDRgdGH0LXRgicsXG4gICAgICAgICAgICA1OiAn0KfQsNGB0YLQuNGH0L3Ri9C5INGA0LDRgdGH0LXRgiDQuCDQutGA0LXQtNC40YInLFxuICAgICAgICAgICAgNjogJ9Cf0LXRgNC10LTQsNGH0LAg0LIg0LrRgNC10LTQuNGCJyxcbiAgICAgICAgICAgIDc6ICfQntC/0LvQsNGC0LAg0LrRgNC10LTQuNGC0LAnLFxuICAgICAgICB9O1xuICAgIH1cbn1cbiIsImltcG9ydCBCYXNlQXRvbSBmcm9tICcuL0Jhc2VBdG9tJztcblxuLyoqINCf0YDQuNC30L3QsNC6INC/0YDQtdC00LzQtdGC0LAg0YDQsNGB0YfQtdGC0LAgKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY2VpcHRJdGVtVHlwZSBleHRlbmRzIEJhc2VBdG9tIHtcbiAgICBzdGF0aWMgZ2V0RGVzYygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIDE6ICfQotC+0LLQsNGAJyxcbiAgICAgICAgICAgIDM6ICfQoNCw0LHQvtGC0LAnLFxuICAgICAgICAgICAgNDogJ9Cj0YHQu9GD0LPQsCcsXG4gICAgICAgICAgICAxMDogJ9Cf0LvQsNGC0LXQticsXG4gICAgICAgIH07XG4gICAgfVxufVxuIiwiaW1wb3J0IEJhc2VBdG9tIGZyb20gJy4vQmFzZUF0b20nO1xuXG4vKiog0J3QlNChICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWYXQgZXh0ZW5kcyBCYXNlQXRvbSB7XG4gICAgc3RhdGljIGdldERlc2MoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAxOiAn0J3QlNChIDIwJScsXG4gICAgICAgICAgICAyOiAn0J3QlNChIDEwJScsXG4gICAgICAgICAgICAzOiAn0J3QlNChIDIwLzEyMCcsXG4gICAgICAgICAgICA0OiAn0J3QlNChIDEwLzExMCcsXG4gICAgICAgICAgICA1OiAn0J3QlNChIDAlJyxcbiAgICAgICAgICAgIDY6ICfQndCU0KEg0L3QtSDQvtCx0LvQsNCz0LDQtdGC0YHRjycsXG4gICAgICAgIH07XG4gICAgfVxufVxuIiwiaW1wb3J0IEJhc2VSZW5kZXJhYmxlIGZyb20gJy4uL0Jhc2VSZW5kZXJhYmxlJztcbmltcG9ydCBFbGVtZW50RmFjdG9yeSBmcm9tICcuLi9FbGVtZW50RmFjdG9yeSc7XG5pbXBvcnQgUGF5bWVudE1ldGhvZCBmcm9tICcuLi9BdG9tcy9QYXltZW50TWV0aG9kJztcbmltcG9ydCBSZWNlaXB0SXRlbVR5cGUgZnJvbSAnLi4vQXRvbXMvUmVjZWlwdEl0ZW1UeXBlJztcbmltcG9ydCBWYXQgZnJvbSAnLi4vQXRvbXMvVmF0JztcblxuLyoqINCf0YDQtdC00LzQtdGCINGA0LDRgdGH0LXRgtCwICjQv9C+0LfQuNGG0LjRjyDRh9C10LrQsCkgKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY2VpcHRJdGVtIGV4dGVuZHMgQmFzZVJlbmRlcmFibGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnR5cGUgPSAxO1xuICAgICAgICB0aGlzLm5hbWUgPSAn0J3QsNC30LLQsNC90LjQtSDRgtC+0LLQsNGA0LAnO1xuICAgICAgICB0aGlzLnByaWNlID0gMTAwMDtcbiAgICAgICAgdGhpcy5xdWFudGl0eSA9IDE7XG4gICAgICAgIHRoaXMudmF0ID0gNjtcbiAgICAgICAgdGhpcy5wYXltZW50TWV0aG9kID0gNDtcbiAgICAgICAgdGhpcy5pbnB1dHMgPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC40YLRjCDRgtC40L8g0L/QvtC30LjRhtC40LhcbiAgICAgKiBAdGhyb3dzIHtJbnZhbGlkQXJndW1lbnRFeGNlcHRpb259XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAgICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICAgKi9cbiAgICBzZXRUeXBlKHR5cGUpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog0JLQvtC30LLRgNCw0YnQsNC10YIg0YLQuNC/INC/0L7Qt9C40YbQuNC4XG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LjRgtGMINC90LDQt9Cy0LDQvdC40LUg0L/QvtC30LjRhtC40LhcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEByZXR1cm5zIHt0aGlzfVxuICAgICAqL1xuICAgIHNldE5hbWUobmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQktC+0LfQstGA0LDRidCw0LXRgiDQvdCw0LfQstCw0L3QuNC1INC/0L7Qt9C40YbQuNC4XG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXROYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cblxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQuNGC0Ywg0YbQtdC90YMg0LfQsCDQtdC00LjQvdC40YbRgyDQv9C+0LfQuNGG0LjQuFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwcmljZVxuICAgICAqIEByZXR1cm5zIHt0aGlzfVxuICAgICAqL1xuICAgIHNldFByaWNlKHByaWNlKSB7XG4gICAgICAgIHRoaXMucHJpY2UgPSBwYXJzZUZsb2F0KHByaWNlKS50b0ZpeGVkKDIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQktC+0LfQstGA0LDRidCw0LXRgiDRhtC10L3QsCDQt9CwINC10LTQuNC90LjRhtGDINC/0L7Qt9C40YbQuNC4XG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXRQcmljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpY2U7XG4gICAgfVxuXG4gICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC40YLRjCDQutC+0LvQuNGH0LXRgdGC0LLQviDQv9GA0LXQtNC80LXRgtC+0LIg0YDQsNGB0YfQtdGC0LAg0L/QvtC30LjRhtC40LhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcXVhbnRpdHlcbiAgICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICAgKi9cbiAgICBzZXRRdWFudGl0eShxdWFudGl0eSkge1xuICAgICAgICB0aGlzLnF1YW50aXR5ID0gcGFyc2VGbG9hdChxdWFudGl0eSkudG9GaXhlZCgzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C40YLRjCDQutC+0LvQuNGH0LXRgdGC0LLQviDQv9GA0LXQtNC80LXRgtC+0LIg0YDQsNGB0YfQtdGC0LAg0L/QvtC30LjRhtC40LhcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldFF1YW50aXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWFudGl0eTtcbiAgICB9XG5cbiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgIC8qKlxuICAgICAqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINC+0LHRidGD0Y4g0YHRg9C80LzRgyDRgNCw0YHRh9C10YLQsCDQv9C+INC/0L7Qt9C40YbQuNC4XG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXRBbW91bnQoKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMucHJpY2UgKyB0aGlzLnF1YW50aXR5KS50b0ZpeGVkKDIpO1xuICAgIH1cblxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQuNGC0Ywg0LfQvdCw0YfQtdC90LjQtSDQndCU0KFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmF0XG4gICAgICogQHJldHVybnMge3RoaXN9XG4gICAgICovXG4gICAgc2V0VmF0KHZhdCkge1xuICAgICAgICB0aGlzLnZhdCA9IHZhdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C40YLRjCDQt9C90LDRh9C10L3QuNC1INCd0JTQoVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0VmF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LjRgtGMINC30L3QsNGH0LXQvdC40LUg0L/RgNC40LfQvdCw0LrQsCDQv9GA0LXQtNC80LXRgtCwINGA0LDRgdGH0LXRgtCwXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBheW1lbnRNZXRob2RcbiAgICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICAgKi9cbiAgICBzZXRQYXltZW50TWV0aG9kKHBheW1lbnRNZXRob2QpIHtcbiAgICAgICAgdGhpcy5wYXltZW50TWV0aG9kID0gcGF5bWVudE1ldGhvZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C40YLRjCDQt9C90LDRh9C10L3QuNC1INC/0YDQuNC30L3QsNC60LAg0L/RgNC10LTQvNC10YLQsCDRgNCw0YHRh9C10YLQsFxuICAgICAqIEByZXR1cm5zIHt0aGlzfVxuICAgICAqL1xuICAgIGdldFBheW1lbnRNZXRob2QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBheW1lbnRNZXRob2Q7XG4gICAgfVxuXG4gICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LjRgtGMINGA0LXQvdC00LXRgCDQv9C+0LfQuNGG0LjQuCDRh9C10LrQsFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0UmVuZGVyKGNhbGxiYWNrVXBkYXRlID0gbnVsbCkge1xuICAgICAgICBzdXBlci5nZXRSZW5kZXIoY2FsbGJhY2tVcGRhdGUpO1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGNvbnN0IHBvcyA9IEVsZW1lbnRGYWN0b3J5LmJ1aWxkRGl2KHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3Bvc2l0aW9uJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGxpbmUxID0gRWxlbWVudEZhY3RvcnkuYnVpbGREaXYoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbGluZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcG9zLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmlucHV0TmFtZSA9IEVsZW1lbnRGYWN0b3J5LmJ1aWxkSW5wdXQoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbmFtZScsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQndCw0LfQstCw0L3QuNC1INC/0L7Qt9C40YbQuNC4JyxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ9Cd0LDQt9Cy0LDQvdC40LUg0L/QvtC30LjRhtC40LgnLFxuICAgICAgICAgICAgICAgIG1pbkxlbmd0aDogMSxcbiAgICAgICAgICAgICAgICBtYXhMZW5ndGg6IDEyOCxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICBvbmNoYW5nZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldE5hbWUoc2VsZi5pbnB1dE5hbWUudmFsdWUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluZTEsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaW5wdXRzLnB1c2godGhpcy5pbnB1dE5hbWUpO1xuXG4gICAgICAgIGNvbnN0IGxpbmUyID0gRWxlbWVudEZhY3RvcnkuYnVpbGREaXYoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbGluZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcG9zLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmlucHV0UHJpY2UgPSBFbGVtZW50RmFjdG9yeS5idWlsZElucHV0KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3ByaWNlJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9Cm0LXQvdCwINC30LAg0LXQtNC40L3QuNGG0YMg0YLQvtCy0LDRgNCwJyxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ9Cm0LXQvdCwJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdGVwOiAnMC4wMScsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJpY2UsXG4gICAgICAgICAgICAgICAgb25jaGFuZ2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRQcmljZShzZWxmLmlucHV0UHJpY2UudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbGxVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbmUyLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmlucHV0cy5wdXNoKHRoaXMuaW5wdXRQcmljZSk7XG5cbiAgICAgICAgdGhpcy5pbnB1dFF1YW50aXR5ID0gRWxlbWVudEZhY3RvcnkuYnVpbGRJbnB1dChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdxdWFudGl0eScsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQmtC+0LvQuNGH0LXRgdGC0LLQviDQv9GA0LXQtNC80LXRgtC+0LInLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAn0JrQvtC7LdCy0L4nLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN0ZXA6ICcwLjAxJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5xdWFudGl0eSxcbiAgICAgICAgICAgICAgICBvbmNoYW5nZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldFF1YW50aXR5KHNlbGYuaW5wdXRRdWFudGl0eS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FsbFVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluZTIsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaW5wdXRzLnB1c2godGhpcy5pbnB1dFF1YW50aXR5KTtcblxuICAgICAgICBWYXQuZ2V0UmVuZGVyKFxuICAgICAgICAgICAgdGhpcy52YXQsXG4gICAgICAgICAgICAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBzZWxmLnNldFZhdCh2YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluZTIsXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgbGluZTMgPSBFbGVtZW50RmFjdG9yeS5idWlsZERpdihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdsaW5lJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwb3MsXG4gICAgICAgICk7XG5cbiAgICAgICAgUGF5bWVudE1ldGhvZC5nZXRSZW5kZXIoXG4gICAgICAgICAgICB0aGlzLnBheW1lbnRNZXRob2QsXG4gICAgICAgICAgICAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBzZWxmLnNldFBheW1lbnRNZXRob2QodmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbmUzLFxuICAgICAgICApO1xuXG4gICAgICAgIFJlY2VpcHRJdGVtVHlwZS5nZXRSZW5kZXIoXG4gICAgICAgICAgICB0aGlzLnR5cGUsXG4gICAgICAgICAgICAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBzZWxmLnNldFR5cGUodmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbmUzLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQgPSBwb3M7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LjRgtGMINC+0LHRitC10LrRgiDQv9C+0LfQuNGG0LjQuCDRh9C10LrQsFxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICovXG4gICAgZ2V0UmF3T2JqZWN0KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgcHJpY2U6IHRoaXMucHJpY2UsXG4gICAgICAgICAgICBxdWFudGl0eTogdGhpcy5xdWFudGl0eSxcbiAgICAgICAgICAgIGFtb3VudDogdGhpcy5nZXRBbW91bnQoKSxcbiAgICAgICAgICAgIHZhdDogdGhpcy52YXQsXG4gICAgICAgICAgICBwYXltZW50X21ldGhvZDogdGhpcy5wYXltZW50TWV0aG9kLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gICAgLyoqXG4gICAgICog0J/RgNC+0LLQtdGA0LrQsCDQstCy0LXQtNC10L3QvdGL0YUg0LTQsNC90L3Ri9GFINC90LAg0LLQsNC70LjQtNC90L7RgdGC0YwsXG4gICAgICog0LIg0YHQu9GD0YfQsNC1INC90LXQstCw0LvQuNC00L3QvtGB0YLQuCDQsdGD0LTRg9GCINCy0YvQtNCw0L3RiyDRgdGC0LDQvdC00LDRgNGC0L3Ri9C1INGD0LLQtdC00L7QvNC70LXQvdC40Y8g0LHRgNCw0YPQt9C10YDQsFxuICAgICAqIEByZXR1cm5zIHtib29sfVxuICAgICAqL1xuICAgIHJlcG9ydFZhbGlkaXR5KCkge1xuICAgICAgICBsZXQgdmFsaWRpdHkgPSB0cnVlO1xuICAgICAgICB0aGlzLmlucHV0cy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF2YWx1ZS5yZXBvcnRWYWxpZGl0eSgpKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRpdHkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHZhbGlkaXR5O1xuICAgIH1cbn1cbiIsImltcG9ydCBCYXNlQXRvbSBmcm9tICcuL0Jhc2VBdG9tJztcblxuLyoqINCi0LjQvyDRh9C10LrQsCAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjZWlwVHlwZSBleHRlbmRzIEJhc2VBdG9tIHtcbiAgICBzdGF0aWMgZ2V0RGVzYygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIDE6ICfQn9GA0LjRhdC+0LQnLFxuICAgICAgICAgICAgMjogJ9CS0L7Qt9Cy0YDQsNGCINC/0YDQuNGF0L7QtNCwJyxcbiAgICAgICAgICAgIDM6ICfQoNCw0YHRhdC+0LQnLFxuICAgICAgICAgICAgNDogJ9CS0L7Qt9Cy0YDQsNGCINGA0LDRgdGF0L7QtNCwJyxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iLCJpbXBvcnQgQmFzZUF0b20gZnJvbSAnLi9CYXNlQXRvbSc7XG5cbi8qKiDQn9C+0LTRgtC40L8g0YfQtdC60LAgKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY2VpcHRTdWJUeXBlIGV4dGVuZHMgQmFzZUF0b20ge1xuICAgIHN0YXRpYyBnZXREZXNjKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgMDogJ9Cg0YPRh9C90L7QuSDRh9C10LonLFxuICAgICAgICAgICAgMTogJ9Cf0YDQtdC00L7Qv9C70LDRgtCwJyxcbiAgICAgICAgICAgIDI6ICfQn9C+0LvQvdGL0Lkg0YDQsNGB0YfQtScsXG4gICAgICAgIH07XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuXG59XG4iLCJpbXBvcnQgQmFzZVJlbmRlcmFibGUgZnJvbSAnLi4vQmFzZVJlbmRlcmFibGUnO1xuaW1wb3J0IEVsZW1lbnRGYWN0b3J5IGZyb20gJy4uL0VsZW1lbnRGYWN0b3J5JztcbmltcG9ydCBSZWNlaXB0VHlwZSBmcm9tICcuLi9BdG9tcy9SZWNlaXB0VHlwZSc7XG5pbXBvcnQgUmVjZWlwdFN1YlR5cGUgZnJvbSAnLi4vQXRvbXMvUmVjZWlwdFN1YlR5cGUnO1xuaW1wb3J0IEludmFsaWRBcmd1bWVudEV4Y2VwdGlvbiBmcm9tICcuLi9FeGNlcHRpb25zL0ludmFsaWRBcmd1bWVudEV4Y2VwdGlvbic7XG5cbi8qKiDQmtGA0LDRgtC60L7QtSDQvtC/0LjRgdCw0L3QuNC1INC4INC/0LXRh9Cw0YLQvdCw0Y8g0LLQtdGA0YHQuNGPINGH0LXQutCwICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmludGFibGUgZXh0ZW5kcyBCYXNlUmVuZGVyYWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy51dWlkID0gJyc7XG4gICAgICAgIHRoaXMuaHJlZiA9ICcnO1xuICAgICAgICB0aGlzLnR5cGUgPSAxO1xuICAgICAgICB0aGlzLnN1YlR5cGUgPSAxO1xuICAgICAgICB0aGlzLmFtb3VudCA9IDA7XG4gICAgICAgIHRoaXMuZGF0ZSA9ICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LjRgtGMINGB0YHRi9C70LrRgyDQvdCwINGA0LXQvdC00LXRgCDRh9C10LrQsFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dWlkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGhyZWZcbiAgICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICAgKi9cbiAgICBzZXRMaW5rKHV1aWQsIGhyZWYpIHtcbiAgICAgICAgdGhpcy51dWlkID0gdXVpZDtcbiAgICAgICAgdGhpcy5ocmVmID0gaHJlZjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQuNGC0Ywg0YLQuNC/INGH0LXQutCwXG4gICAgICogQHNlZSBSZWNlaXB0VHlwZVxuICAgICAqIEB0aHJvd3Mge0ludmFsaWRBcmd1bWVudEV4Y2VwdGlvbn1cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICAgICAqIEByZXR1cm5zIHt0aGlzfVxuICAgICAqL1xuICAgIHNldFR5cGUodHlwZSkge1xuICAgICAgICBpZiAoIVJlY2VpcHRUeXBlLmlzVmFsaWQodHlwZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgYGV4Y3BlY3RlZCAke09iamVjdC5rZXlzKFJlY2VpcHRUeXBlLmdldERlc2MoKSkuam9pbignLCAnKX0sIGJ1dCBnZXQgJHt0eXBlfWAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCf0J7Qu9GD0YfQuNGC0Ywg0YLQuNC/INGH0LXQutCwXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LjRgtGMINC/0L7QtNGC0LjQvyDRh9C10LrQsFxuICAgICAqIEBzZWUgUmVjZWlwdFN1YlR5cGVcbiAgICAgKiBAdGhyb3dzIHtJbnZhbGlkQXJndW1lbnRFeGNlcHRpb259XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YlR5cGVcbiAgICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICAgKi9cbiAgICBzZXRTdWJUeXBlKHN1YlR5cGUpIHtcbiAgICAgICAgaWYgKCFSZWNlaXB0U3ViVHlwZS5pc1ZhbGlkKHN1YlR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgIGBleHBlY3RlZCAke09iamVjdC5rZXlzKFJlY2VpcHRTdWJUeXBlLmdldERlc2MoKSkuam9pbignLCAnKX0sIGJ1dCBnZXQgJHtzdWJUeXBlfWAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3ViVHlwZSA9IHN1YlR5cGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LjRgtGMINGB0YPQvNC80YMg0LTQstC40LbQtdC90LjRjyDQtNC10L3QtdC20L3Ri9GFINGB0YDQtdC00YHRgtCyINGH0LXQutCwICjRgdGD0LzQvNGDINC/0YDQuNGF0L7QtNCwINC40LvQuCDQstC+0LfQstGA0LDRgtCwKVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnRcbiAgICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICAgKi9cbiAgICBzZXRBbW91bnQoYW1vdW50KSB7XG4gICAgICAgIHRoaXMuYW1vdW50ID0gYW1vdW50O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LjRgtGMINGB0YPQvNC80YMg0LTQstC40LbQtdC90LjRjyDQtNC10L3QtdC20L3Ri9GFINGB0YDQtdC00YHRgtCyXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXRBbW91bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFtb3VudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC40YLRjCDQtNCw0YLRgyDRhNC40YHQutCw0LvQuNC30LDRhtC40LhcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0ZVxuICAgICAqIEByZXR1cm5zIHt0aGlzfVxuICAgICAqL1xuICAgIHNldERhdGUoZGF0ZSkge1xuICAgICAgICB0aGlzLmRhdGUgPSBkYXRlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKiogQGluaGVyaXRkb2MgKi9cbiAgICBnZXRSZW5kZXIoY2FsbGJhY2tVcGRhdGUgPSBudWxsKSB7XG4gICAgICAgIHN1cGVyLmdldFJlbmRlcihjYWxsYmFja1VwZGF0ZSk7XG5cbiAgICAgICAgY29uc3QgbGluZSA9IEVsZW1lbnRGYWN0b3J5LmJ1aWxkRGl2KHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2xpbmUtcHJpbnRhYmxlJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8g0YHRgdGL0LvQutCwXG4gICAgICAgIEVsZW1lbnRGYWN0b3J5LmJ1aWxkKFxuICAgICAgICAgICAgJ2EnLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3JlY2VpcHQtbGluaycsXG4gICAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6IHRoaXMudXVpZCxcbiAgICAgICAgICAgICAgICBocmVmOiB0aGlzLmhyZWYsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiAnYmxhbmsnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g0YLQuNC/XG4gICAgICAgIEVsZW1lbnRGYWN0b3J5LmJ1aWxkRGl2KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIGNsYXNzTmFtZTogXCJsaW5lXCJcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogUmVjZWlwdFN1YlR5cGUuZ2V0RGVzYygpW3RoaXMudHlwZV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluZSxcbiAgICAgICAgKTtcblxuICAgICAgICAvLyDRgdGD0LzQvNCwXG4gICAgICAgIEVsZW1lbnRGYWN0b3J5LmJ1aWxkRGl2KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIGNsYXNzTmFtZTogXCJsaW5lXCJcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogYCR7dGhpcy5hbW91bnR9INGA0YPQsS5gLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g0LTQsNGC0LBcbiAgICAgICAgRWxlbWVudEZhY3RvcnkuYnVpbGREaXYoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gY2xhc3NOYW1lOiBcImxpbmVcIlxuICAgICAgICAgICAgICAgIHRleHRDb250ZW50OiB0aGlzLmRhdGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluZSxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50ID0gbGluZTtcblxuICAgICAgICByZXR1cm4gdGhpcy5yb290RWxlbWVudDtcbiAgICB9XG59XG4iLCJpbXBvcnQgQmFzZVJlbmRlcmFibGUgZnJvbSAnLi4vQmFzZVJlbmRlcmFibGUnO1xuaW1wb3J0IEVsZW1lbnRGYWN0b3J5IGZyb20gJy4uL0VsZW1lbnRGYWN0b3J5JztcbmltcG9ydCBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbiBmcm9tICcuLi9FeGNlcHRpb25zL05vdEltcGxlbWVudGVkRXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZUNvbGxlY3Rpb24gZXh0ZW5kcyBCYXNlUmVuZGVyYWJsZSB7XG4gICAgLyoqXG4gICAgICog0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0Y3Qu9C10LzQtdC90YLQsCDQutC+0LvQu9C10LrRhtC40LhcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHN0YXRpYyBpZCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiDQpdGA0LDQvdC40LvQuNGJ0LUg0Y3Qu9C10LzQtdC90YLQvtCyINC60L7Qu9C70LXQutGG0LjQuFxuICAgICAqIEB0eXBlIHtNYXB9XG4gICAgICovXG4gICAgc3Ryb2FnZSA9IG5ldyBNYXAoKTtcblxuICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxuICAgIC8qKlxuICAgICAqINCY0YLQtdGA0LDRgtC+0YAg0LrQvtC70LvQtdC60YbQuNC4XG4gICAgICogQGV4YW1wbGUgZm9yIChsZXQgW2tleSwgaXRlbV0gb2YgdGhpcykge31cbiAgICAgKiBAcmV0dXJucyB7aXRlcmF0b3J9XG4gICAgICovXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cm9hZ2UuZW50cmllcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCf0YDQvtCy0LXRgNC60LAg0LLQsNC70LjQtNC90L7RgdGC0Lgg0YLQuNC/0LAg0L/RgNC4INC00L7QsdCw0LLQu9C10L3QuNC4INGN0LvQtdC80LXQvdGC0LAg0LIg0LrQvtC70LvQtdC60YbQuNGOXG4gICAgICogQHRocm93cyB7Tm90SW1wbGVtZW50ZWRFeGNlcHRpb259INC10YHQu9C4INC00L7Rh9C10YDQvdC40LUg0LrQu9Cw0YHRgdGLINC90LUg0L/QtdGA0LXQvtC/0YDQtdC00LXQu9GP0Y7RgiDQvNC10YLQvtC0XG4gICAgICogQHRocm93cyB7SW52YWxpZEFyZ3VtZW50RXhjZXB0aW9ufSDQsiDRgdC70YPRh9Cw0LUg0L3QtdCy0LXRgNC90L7Qs9C+INGC0LjQv9CwIGRhdGFcbiAgICAgKiBAcGFyYW0geyp9IGRhdGFcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBjb250cm9sVHlwZShkYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCU0L7QsdCw0LLQuNGC0Ywg0Y3Qu9C10LzQtdC90YIg0LIg0LrQvtC70LvQtdC60YbQuNGOXG4gICAgICogQHNlZSBCYXNlQ29sbGVjdGlvbiNjb250cm9sVHlwZSDQuNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8g0LTQu9GPINC/0YDQvtCy0LXRgNC60Lgg0YLQuNC/0LBcbiAgICAgKiBAcGFyYW0geyp9IGRhdGFcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDRjdC70LXQvNC10L3RgtCwXG4gICAgICovXG4gICAgYWRkKGRhdGEpIHtcbiAgICAgICAgdGhpcy5jb250cm9sVHlwZShkYXRhKTtcblxuICAgICAgICBjb25zdCB7IGlkIH0gPSBCYXNlQ29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5zdHJvYWdlLnNldChpZCwgZGF0YSk7XG4gICAgICAgIEJhc2VDb2xsZWN0aW9uLmlkICs9IDE7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQo9C00LDQu9C40YLRjCDRjdC70LXQvNC10L3RgiDQuNC3INC60L7Qu9C70LXQutGG0LjQuCDQv9C+IGlkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlkXG4gICAgICovXG4gICAgcmVtb3ZlKGlkKSB7XG4gICAgICAgIHRoaXMuc3Ryb2FnZS5kZWxldGUoaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQuNGC0Ywg0Y3Qu9C10LzQtdC90YIg0LrQvtC70LvQtdC60YbQuNC4INC/0L4gaWRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaWRcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBnZXQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3Ryb2FnZS5nZXQoaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCg0LDQt9C80LXRgCDQutC+0LvQu9C10LrRhtC40LhcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cm9hZ2Uuc2l6ZTtcbiAgICB9XG5cbiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbiAgICAvKiogQGluaGVyaXRkb2MgKi9cbiAgICBnZXRSZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGRpdiA9IEVsZW1lbnRGYWN0b3J5LmJ1aWxkRGl2KHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3dyYXAtb3V0ZXInLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnN0cm9hZ2UuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGRpdi5hcHBlbmQodmFsdWUuZ2V0UmVuZGVyKCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cbn1cbiIsImltcG9ydCBCYXNlQ29sbGVjdGlvbiBmcm9tICcuL0Jhc2VDb2xsZWN0aW9uJztcbmltcG9ydCBFbGVtZW50RmFjdG9yeSBmcm9tICcuLi9FbGVtZW50RmFjdG9yeSc7XG5pbXBvcnQgUmVjZWlwdEl0ZW0gZnJvbSAnLi4vRW50aXRpZXMvUmVjZWlwdEl0ZW0nO1xuaW1wb3J0IEludmFsaWRBcmd1bWVudEV4Y2VwdGlvbiBmcm9tICcuLi9FeGNlcHRpb25zL0ludmFsaWRBcmd1bWVudEV4Y2VwdGlvbic7XG5cbi8qKiDQmtC+0LvQu9C10LrRhtC40Y8g0L/QvtC30LjRhtC40Y8g0YfQtdC60LAgKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY2VpcHRJdGVtQ29sbGVjdGlvbiBleHRlbmRzIEJhc2VDb2xsZWN0aW9uIHtcbiAgICAvKiogQGluaGVyaXRkb2MgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBjb250cm9sVHlwZShkYXRhKSB7XG4gICAgICAgIGlmICghKGRhdGEgaW5zdGFuY2VvZiBSZWNlaXB0SXRlbSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFeGNlcHRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQuNGC0Ywg0L7QsdGJ0YPRjiDRgdGD0LzQvNGDINCy0YHQtdGFINC/0L7Qt9C40YbQuNC5XG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldEFtb3VudCgpIHtcbiAgICAgICAgbGV0IGFtb3VudCA9IDA7XG5cbiAgICAgICAgdGhpcy5zdHJvYWdlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGFtb3VudCArPSBpdGVtLmdldFByaWNlKCkgKiBpdGVtLmdldFF1YW50aXR5KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGFtb3VudCkudG9GaXhlZCgyKTtcbiAgICB9XG5cbiAgICAvKiogQGluaGVyaXRkb2MgKi9cbiAgICBnZXRSZW5kZXIoY2FsbGJhY2tVcGRhdGUgPSBudWxsKSB7XG4gICAgICAgIHN1cGVyLmdldFJlbmRlcihjYWxsYmFja1VwZGF0ZSk7XG5cbiAgICAgICAgdGhpcy5yb290RWxlbWVudCA9IEVsZW1lbnRGYWN0b3J5LmJ1aWxkRGl2KHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3dyYXAtZHVtbXknLFxuICAgICAgICB9KTtcblxuICAgICAgICBFbGVtZW50RmFjdG9yeS5idWlsZChcbiAgICAgICAgICAgICdoMicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnJyxcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogJ9Ch0L/QuNGB0L7QuiDQv9C+0LfQuNGG0LjQuScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpcy5yb290RWxlbWVudCxcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBhbW91bnRMaW5lID0gRWxlbWVudEZhY3RvcnkuYnVpbGREaXYoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbGluZS1zdW1tYXJ5JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzLnJvb3RFbGVtZW50LFxuICAgICAgICApO1xuXG4gICAgICAgIEVsZW1lbnRGYWN0b3J5LmJ1aWxkKFxuICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdsYWJlbCcsXG4gICAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6ICfQodGD0LzQvNCwOicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW1vdW50TGluZSxcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBhbW91bnQgPSBFbGVtZW50RmFjdG9yeS5idWlsZChcbiAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbGFiZWwnLFxuICAgICAgICAgICAgICAgIHRleHRDb250ZW50OiB0aGlzLmdldEFtb3VudCgpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFtb3VudExpbmUsXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gRWxlbWVudEZhY3RvcnkuYnVpbGREaXYoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAncG9zaXRpb25zJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzLnJvb3RFbGVtZW50LFxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGNvbnN0IGZuQW1vdW50VXBkYXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgYW1vdW50LnRleHRDb250ZW50ID0gc2VsZi5nZXRBbW91bnQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyDRhNGD0L3QutGG0LjRjyDQtNC+0LHQsNCy0LvQtdC90LjRjyDQvdC+0LLQvtCz0L4g0LjRgtC10LzQsFxuICAgICAgICBjb25zdCBmbkFkZEl0ZW0gPSAoa2V5LCBpdGVtKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZW1vdmUgPSBFbGVtZW50RmFjdG9yeS5idWlsZERpdihcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2J0bi1yZW1vdmUnLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogJ8OXJyxcbiAgICAgICAgICAgICAgICAgICAgb25jbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdHJvYWdlLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuQW1vdW50VXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnMsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcG9zaXRpb25zLmFwcGVuZChpdGVtLmdldFJlbmRlcihmbkFtb3VudFVwZGF0ZSkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc3Ryb2FnZS5mb3JFYWNoKChpdGVtLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGZuQWRkSXRlbShrZXksIGl0ZW0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyDQutC90L7Qv9C60LAg0LTQvtCx0LDQstC70LXQvdC40Y8g0L3QvtCy0L7Qs9C+INC40YLQtdC80LBcbiAgICAgICAgRWxlbWVudEZhY3RvcnkuYnVpbGREaXYoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYnRuLWFkZCcsXG4gICAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6ICcrJyxcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gc2VsZi5hZGQobmV3IFJlY2VpcHRJdGVtKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gc2VsZi5zdHJvYWdlLmdldChpZCk7XG4gICAgICAgICAgICAgICAgICAgIGZuQWRkSXRlbShpZCwgaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIGZuQW1vdW50VXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzLnJvb3RFbGVtZW50LFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnJvb3RFbGVtZW50O1xuICAgIH1cblxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQuNGC0Ywg0LzQsNGB0YHQuNCyINC+0LHRitC10LrRgtC+0LIg0L/QvtC30LjRhtC40Lkg0YfQtdC60LBcbiAgICAgKiBAcmV0dXJucyB7YXJyYXl9XG4gICAgICovXG4gICAgZ2V0UmF3QXJyYXkoKSB7XG4gICAgICAgIGNvbnN0IHJhdyA9IFtdO1xuXG4gICAgICAgIHRoaXMuc3Ryb2FnZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICByYXcucHVzaChpdGVtLmdldFJhd09iamVjdCgpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJhdztcbiAgICB9XG5cbiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgIC8qKlxuICAgICAqINCf0YDQvtCy0LXRgNC60LAg0LLQstC10LTQtdC90L3Ri9GFINC00LDQvdC90YvRhSDQvdCwINCy0LDQu9C40LTQvdC+0YHRgtGMLFxuICAgICAqINCyINGB0LvRg9GH0LDQtSDQvdC10LLQsNC70LjQtNC90L7RgdGC0Lgg0LHRg9C00YPRgiDQstGL0LTQsNC90Ysg0YHRgtCw0L3QtNCw0YDRgtC90YvQtSDRg9Cy0LXQtNC+0LzQu9C10L3QuNGPINCx0YDQsNGD0LfQtdGA0LBcbiAgICAgKiBAcmV0dXJucyB7Ym9vbH1cbiAgICAgKi9cbiAgICByZXBvcnRWYWxpZGl0eSgpIHtcbiAgICAgICAgbGV0IHZhbGlkaXR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdHJvYWdlLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXZhbHVlLnJlcG9ydFZhbGlkaXR5KCkpIHtcbiAgICAgICAgICAgICAgICB2YWxpZGl0eSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdmFsaWRpdHk7XG4gICAgfVxufVxuIiwiaW1wb3J0IEJhc2VSZW5kZXJhYmxlIGZyb20gJy4uL0Jhc2VSZW5kZXJhYmxlJztcbmltcG9ydCBSZWNlaXB0SXRlbUNvbGxlY3Rpb24gZnJvbSAnLi4vQ29sbGVjdGlvbnMvUmVjZWlwdEl0ZW1Db2xsZWN0aW9uJztcbmltcG9ydCBFbGVtZW50RmFjdG9yeSBmcm9tICcuLi9FbGVtZW50RmFjdG9yeSc7XG5pbXBvcnQgUmVjZWlwdFR5cGUgZnJvbSAnLi4vQXRvbXMvUmVjZWlwdFR5cGUnO1xuaW1wb3J0IEludmFsaWRBcmd1bWVudEV4Y2VwdGlvbiBmcm9tICcuLi9FeGNlcHRpb25zL0ludmFsaWRBcmd1bWVudEV4Y2VwdGlvbic7XG5cbi8qKiDQp9C10LogKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY2VpcHQgZXh0ZW5kcyBCYXNlUmVuZGVyYWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5pdGVtcyA9IG5ldyBSZWNlaXB0SXRlbUNvbGxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy5lbWFpbCA9ICcnO1xuICAgICAgICB0aGlzLnBob25lID0gJyc7XG4gICAgICAgIHRoaXMudHlwZSA9IDE7XG4gICAgICAgIHRoaXMub3JkZXJJZCA9ICcwJztcbiAgICAgICAgdGhpcy5pbnB1dHMgPSBbXTtcbiAgICB9XG5cbiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LjRgtGMINC40LTQtdC90YLRhNC40LjQutCw0YLQvtGAINC30LDQutCw0LfQsFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcmRlcklkXG4gICAgICogQHJldHVybnMge3RoaXN9XG4gICAgICovXG4gICAgc2V0T3JkZXJJZChvcmRlcklkKSB7XG4gICAgICAgIHRoaXMub3JkZXJJZCA9IG9yZGVySWQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQuNGC0Ywg0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0LfQsNC60LDQt9CwXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRPcmRlcklkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmRlcklkO1xuICAgIH1cblxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LjRgtGMINGC0LjQvyDRh9C10LrQsFxuICAgICAqIEBzZWUgUmVjZWlwdFR5cGVcbiAgICAgKiBAdGhyb3dzIHtJbnZhbGlkQXJndW1lbnRFeGNlcHRpb259XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAgICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICAgKi9cbiAgICBzZXRUeXBlKHR5cGUpIHtcbiAgICAgICAgaWYgKCFSZWNlaXB0VHlwZS5pc1ZhbGlkKHR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgIGBleGNwZWN0ZWQgJHtPYmplY3Qua2V5cyhSZWNlaXB0VHlwZS5nZXREZXNjKCkpLmpvaW4oJywgJyl9LCBidXQgZ2V0ICR7dHlwZX1gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LjRgtGMINGC0LjQvyDRh9C10LrQsFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICB9XG5cbiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQuNGC0Ywg0LrQvtC70LvQtdC60YbQuNGOINC/0L7Qt9C40YbQuNC5INGH0LXQutCwXG4gICAgICogQHJldHVybnMge1JlY2VpcHRJdGVtQ29sbGVjdGlvbn1cbiAgICAgKi9cbiAgICBnZXRJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXM7XG4gICAgfVxuXG4gICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC40YLRjCBlbWFpbCDQv9C+0LrRg9C/0LDRgtC10LvRj1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbWFpbFxuICAgICAqIEByZXR1cm5zIHt0aGlzfVxuICAgICAqL1xuICAgIHNldEVtYWlsKGVtYWlsKSB7XG4gICAgICAgIHRoaXMuZW1haWwgPSBlbWFpbDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C40YLRjCBlbWFpbCDQv9C+0LrRg9C/0LDRgtC10LvRj1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0RW1haWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVtYWlsO1xuICAgIH1cblxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQuNGC0Ywg0L3QvtC80LXRgCDRgtC10LvQtdGE0L7QvdCwINC/0L7QutGD0L/QsNGC0LXQu9GPXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBob25lXG4gICAgICogQHJldHVybnMge3RoaXN9XG4gICAgICovXG4gICAgc2V0UGhvbmUocGhvbmUpIHtcbiAgICAgICAgdGhpcy5waG9uZSA9IHBob25lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LjRgtGMINC90L7QvNC10YAg0YLQtdC70LXRhNC+0L3QsCDQv9C+0LrRg9C/0LDRgtC10LvRj1xuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRQaG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGhvbmU7XG4gICAgfVxuXG4gICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgICAvKipcbiAgICAgKiDQodC+0LfQtNCw0L3QuNC1INGN0LvQtdC80LXQvdGC0LAg0LrQvtC90YLQsNC60YLQvtCyICjQvtCx0LXRgNC90YPRgtC+KVxuICAgICAqIEByZXR1cm5zIHtIVE1MRGl2RWxlbWVudH1cbiAgICAgKi9cbiAgICBnZXRSZW5kZXJDb250YWN0cygpIHtcbiAgICAgICAgY29uc3QgY29udGFjdHMgPSBFbGVtZW50RmFjdG9yeS5idWlsZERpdih7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICd3cmFwLWR1bW15JyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbGluZTEgPSBFbGVtZW50RmFjdG9yeS5idWlsZERpdihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdsaW5lJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250YWN0cyxcbiAgICAgICAgKTtcblxuICAgICAgICBFbGVtZW50RmFjdG9yeS5idWlsZChcbiAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbGFiZWwnLFxuICAgICAgICAgICAgICAgIHRleHRDb250ZW50OiAnRW1haWw6JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5lMSxcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBlbWFpbCA9IEVsZW1lbnRGYWN0b3J5LmJ1aWxkSW5wdXQoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnaW5wdXQnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdlbWFpbCcsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdib3hAZG9tYWluLnpvbmUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmVtYWlsLFxuICAgICAgICAgICAgICAgIG9uY2hhbmdlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RW1haWwoZW1haWwudmFsdWUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluZTEsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaW5wdXRzLnB1c2goZW1haWwpO1xuXG4gICAgICAgIGNvbnN0IGxpbmUyID0gRWxlbWVudEZhY3RvcnkuYnVpbGREaXYoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbGluZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGFjdHMsXG4gICAgICAgICk7XG5cbiAgICAgICAgRWxlbWVudEZhY3RvcnkuYnVpbGQoXG4gICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2xhYmVsJyxcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogJ9Ci0LXQu9C10YTQvtC9OicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluZTIsXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgcGhvbmUgPSBFbGVtZW50RmFjdG9yeS5idWlsZElucHV0KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2lucHV0JyxcbiAgICAgICAgICAgICAgICB0eXBlOiAndGVsJyxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJys3LTEyMy00NTYtNzgtOTknLFxuICAgICAgICAgICAgICAgIG1pbkxlbmd0aDogMTAsXG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoOiAxNSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5waG9uZSxcbiAgICAgICAgICAgICAgICBvbmNoYW5nZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFBob25lKHBob25lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbmUyLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmlucHV0cy5wdXNoKHBob25lKTtcblxuICAgICAgICByZXR1cm4gY29udGFjdHM7XG4gICAgfVxuXG4gICAgLyoqIEBpbmhlcml0ZG9jICovXG4gICAgZ2V0UmVuZGVyKGNhbGxiYWNrVXBkYXRlID0gbnVsbCkge1xuICAgICAgICBzdXBlci5nZXRSZW5kZXIoY2FsbGJhY2tVcGRhdGUpO1xuXG4gICAgICAgIGNvbnN0IGRpdiA9IEVsZW1lbnRGYWN0b3J5LmJ1aWxkRGl2KHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3dyYXAtb3V0ZXInLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yb290RWxlbWVudCA9IGRpdjtcblxuICAgICAgICAvLyDQstGB0YLQsNCy0LrQsCDQutC+0L3RgtCw0LrRgtC+0LJcbiAgICAgICAgZGl2LmFwcGVuZCh0aGlzLmdldFJlbmRlckNvbnRhY3RzKCkpO1xuXG4gICAgICAgIC8vINCy0YHRgtCw0LLQutCwINC/0L7Qt9C40YbQuNC5XG4gICAgICAgIGRpdi5hcHBlbmQodGhpcy5pdGVtcy5nZXRSZW5kZXIoKSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LjRgtGMINC+0LHRitC10LrRgiDRh9C10LrQsFxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICovXG4gICAgZ2V0UmF3T2JqZWN0KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgZW1haWw6IHRoaXMuZW1haWwsXG4gICAgICAgICAgICBwaG9uZTogdGhpcy5waG9uZSxcbiAgICAgICAgICAgIGl0ZW1zOiB0aGlzLml0ZW1zLmdldFJhd0FycmF5KCksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgICAvKipcbiAgICAgKiDQn9GA0L7QstC10YDQutCwINCy0LLQtdC00LXQvdC90YvRhSDQtNCw0L3QvdGL0YUg0L3QsCDQstCw0LvQuNC00L3QvtGB0YLRjCxcbiAgICAgKiDQsiDRgdC70YPRh9Cw0LUg0L3QtdCy0LDQu9C40LTQvdC+0YHRgtC4INCx0YPQtNGD0YIg0LLRi9C00LDQvdGLINGB0YLQsNC90LTQsNGA0YLQvdGL0LUg0YPQstC10LTQvtC80LvQtdC90LjRjyDQsdGA0LDRg9C30LXRgNCwXG4gICAgICogQHJldHVybnMge2Jvb2x9XG4gICAgICovXG4gICAgcmVwb3J0VmFsaWRpdHkoKSB7XG4gICAgICAgIGxldCB2YWxpZGl0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5wdXRzLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXZhbHVlLnJlcG9ydFZhbGlkaXR5KCkpIHtcbiAgICAgICAgICAgICAgICB2YWxpZGl0eSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXZhbGlkaXR5KSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsaWRpdHk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5yZXBvcnRWYWxpZGl0eSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCBCYXNlQ29sbGVjdGlvbiBmcm9tICcuL0Jhc2VDb2xsZWN0aW9uJztcbmltcG9ydCBQcmludGFibGUgZnJvbSAnLi4vRW50aXRpZXMvUHJpbnRhYmxlJztcbmltcG9ydCBFbGVtZW50RmFjdG9yeSBmcm9tICcuLi9FbGVtZW50RmFjdG9yeSc7XG5pbXBvcnQgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uIGZyb20gJy4uL0V4Y2VwdGlvbnMvSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uJztcblxuLyoqINCk0LjRgdC60LDQu9C40LfQuNGA0L7QstCw0L3QvdGL0LUg0YfQtdC60LgsINC60L7RgtC+0YDRi9C1INGB0YPRidC10YHRgtCy0YPRjtGCINCyINC30LDQutCw0LfQtSAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJpbnRhYmxlQ29sbGVjdGlvbiBleHRlbmRzIEJhc2VDb2xsZWN0aW9uIHtcbiAgICAvKiogQGluaGVyaXRkb2MgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBjb250cm9sVHlwZShkYXRhKSB7XG4gICAgICAgIGlmICghKGRhdGEgaW5zdGFuY2VvZiBQcmludGFibGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LjRgtGMINCx0LDQu9Cw0L3RgSDQt9Cw0LrQsNC30LAgKNGB0LrQvtC70YzQutC+INC00LXQvdC10LMg0L/QviDQvdC10LzRgyDQvtGB0YLQsNC70L7RgdGMINC/0L7RgdC70LUg0LLRgdC10YUg0LLQvtC30LLRgNCw0YLQvtCyKVxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXRCYWxhbmNlKCkge1xuICAgICAgICBsZXQgYmFsYW5jZSA9IDA7XG5cbiAgICAgICAgdGhpcy5zdHJvYWdlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLmdldFR5cGUoKSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGJhbGFuY2UgKz0gaXRlbS5nZXRBbW91bnQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5nZXRUeXBlKCkgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBiYWxhbmNlIC09IGl0ZW0uZ2V0QW1vdW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGJhbGFuY2UpLnRvRml4ZWQoMik7XG4gICAgfVxuXG4gICAgLyoqIEBpbmhlcml0ZG9jICovXG4gICAgZ2V0UmVuZGVyKGNhbGxiYWNrVXBkYXRlID0gbnVsbCkge1xuICAgICAgICBzdXBlci5nZXRSZW5kZXIoY2FsbGJhY2tVcGRhdGUpO1xuXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQgPSBzdXBlci5nZXRSZW5kZXIoKTtcblxuICAgICAgICBjb25zdCBsaW5lID0gRWxlbWVudEZhY3RvcnkuYnVpbGREaXYoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbGluZS1zdW1tYXJ5JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzLnJvb3RFbGVtZW50LFxuICAgICAgICApO1xuXG4gICAgICAgIEVsZW1lbnRGYWN0b3J5LmJ1aWxkKFxuICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdsYWJlbCcsXG4gICAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6ICfQkdCw0LvQsNC90YE6JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5lLFxuICAgICAgICApO1xuXG4gICAgICAgIEVsZW1lbnRGYWN0b3J5LmJ1aWxkKFxuICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdsYWJlbCcsXG4gICAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6IHRoaXMuZ2V0QmFsYW5jZSgpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgaDIgPSBFbGVtZW50RmFjdG9yeS5idWlsZChcbiAgICAgICAgICAgICdoMicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnJyxcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogJ9CS0YHQtSDRh9C10LrQuCDQt9Cw0LrQsNC30LAnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnByZXBlbmQoaDIpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnJvb3RFbGVtZW50O1xuICAgIH1cbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWNlaXB0SXRlbSBmcm9tICcuL0VudGl0aWVzL1JlY2VpcHRJdGVtJztcbmltcG9ydCBQcmludGFibGUgZnJvbSAnLi9FbnRpdGllcy9QcmludGFibGUnO1xuaW1wb3J0IFJlY2VpcHRCdWlsZGVyIGZyb20gJy4vUmVjZWlwdEJ1aWxkZXInO1xuaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5cbndpbmRvdy5pbm5va2Fzc2EgPSB7XG4gICAgUmVjZWlwdEJ1aWxkZXIsXG4gICAgUmVjZWlwdEl0ZW0sXG4gICAgUHJpbnRhYmxlLFxufTtcbiIsImltcG9ydCBSZWNlaXB0IGZyb20gJy4vRW50aXRpZXMvUmVjZWlwdCc7XG5pbXBvcnQgUHJpbnRhYmxlQ29sbGVjdGlvbiBmcm9tICcuL0NvbGxlY3Rpb25zL1ByaW50YWJsZUNvbGxlY3Rpb24nO1xuaW1wb3J0IEludmFsaWRBcmd1bWVudEV4Y2VwdGlvbiBmcm9tICcuL0V4Y2VwdGlvbnMvSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uJztcbmltcG9ydCBFbGVtZW50RmFjdG9yeSBmcm9tICcuL0VsZW1lbnRGYWN0b3J5JztcblxuLyoqINCh0YLRgNC+0LjRgtC10LvRjCDQuNC90YLQtdGA0YTQtdC50YHQsCDRhNC+0YDQvNC40YDQvtCy0LDQvdC40Y8g0L3QvtCy0L7Qs9C+INGH0LXQutCwICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWNlaXB0QnVpbGRlciB7XG4gICAgLyoqXG4gICAgICogQHRocm93cyB7SW52YWxpZEFyZ3VtZW50RXhjZXB0aW9ufSDQtdGB0LvQuCBlbGVtZW50INC90LUg0Y/QstC70Y/QtdGC0YHRjyDQvtCx0YrQtdC60YLQvtC8INGC0LjQv9CwIEhUTUxFbGVtZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCDQvtCx0YrQtdC60YIg0YEg0L3QsNCx0L7RgNC+0Lwg0L/QsNGA0LDQvNC10YLRgNC+0LJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBvYmplY3QuZWxlbWVudCDRjdC70LXQvNC10L3RgiDQsiDQutC+0YLQvtGA0YvQuSDQsdGD0LTQtdGCINCy0YHRgtGA0L7QtdC9INC40L3RgtC10YDRhNC10LnRgVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvYmplY3QucmVjZWlwdFR5cGUg0YLQuNC/INGH0LXQutCwLCDRgdC8LiBSZWNlaXB0VHlwZVxuICAgICAqIEBwYXJhbSB7Ym9vbH0gb2JqZWN0LmNhbkhlYWRlclJlbmRlciDQv9C+0LrQsNC30YvQstCw0YLRjCDQu9C4INC30LDQs9C+0LvQvtCy0L7QulxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgcmVjZWlwdFR5cGUgPSAxLCBjYW5IZWFkZXJSZW5kZXIgPSB0cnVlIH0pIHtcbiAgICAgICAgaWYgKCEoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEV4Y2VwdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5yZWNlaXB0ID0gbmV3IFJlY2VpcHQoKTtcbiAgICAgICAgdGhpcy5yZWNlaXB0LnNldFR5cGUocmVjZWlwdFR5cGUpO1xuICAgICAgICB0aGlzLnByaW50YWJsZXMgPSBuZXcgUHJpbnRhYmxlQ29sbGVjdGlvbigpO1xuICAgICAgICB0aGlzLmZuU2VuZCA9IG51bGw7XG4gICAgICAgIHRoaXMuZm5DbG9zZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY2FuSGVhZGVyUmVuZGVyID0gY2FuSGVhZGVyUmVuZGVyO1xuICAgIH1cblxuICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQuNGC0Ywg0LTQsNC90L3Ri9C1INGH0LXQutCwXG4gICAgICogQHJldHVybnMge1JlY2VpcHR9XG4gICAgICovXG4gICAgZ2V0UmVjZWlwdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVjZWlwdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LjRgtGMINC60L7Qu9C70LXQutGG0LjRjiDRgNC10L3QtNC10YDQvtCyINGH0LXQutC+0LJcbiAgICAgKiBAcmV0dXJucyB7UHJpbnRhYmxlQ29sbGVjdGlvbn1cbiAgICAgKi9cbiAgICBnZXRQcmludGFibGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmludGFibGVzO1xuICAgIH1cblxuICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C40YLRjCDRgtC10LrRgdGCINC30LDQs9C+0LvQvtCy0LrQsFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0SGVhZGVyKCkge1xuICAgICAgICByZXR1cm4gYNCd0L7QstGL0Lkg0YfQtdC6ICR7dGhpcy5yZWNlaXB0LmdldFR5cGUoKSA9PT0gMSA/ICfQv9GA0LjRhdC+0LTQsCcgOiAn0LLQvtC30LLRgNCw0YLQsCd9INC30LDQutCw0LfQsCAjJHt0aGlzLnJlY2VpcHQuZ2V0T3JkZXJJZCgpfWA7XG4gICAgfVxuXG4gICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC+0LHRgNCw0LHQvtGC0YfQuNC60LAg0LrQu9C40LrQsCDQvdCwINC60L3QvtC/0LrRgyBcItCe0YLQv9GA0LDQstC40YLRjFwiXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAgICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICAgKi9cbiAgICBzZXRDYWxsYmFja1NlbmQoZm4pIHtcbiAgICAgICAgdGhpcy5mblNlbmQgPSBmbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC+0LHRgNCw0LHQvtGC0YfQuNC60LAg0LrQu9C40LrQsCDQvdCwINC60L3QvtC/0LrRgyBcItCe0YLQvNC10L3QuNGC0YxcIlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG4gICAgICogQHJldHVybnMge3RoaXN9XG4gICAgICovXG4gICAgc2V0Q2FsbGJhY2tDbG9zZShmbikge1xuICAgICAgICB0aGlzLmZuQ2xvc2UgPSBmbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG4gICAgLyoqXG4gICAgICog0KDQtdC90LTQtdGAINGB0L7Qt9C00LDQvdC40Y8g0YfQtdC60LBcbiAgICAgKiBAdG9kbyDQtNC+0LHQsNCy0LjRgtGMINC+0LHRgNCw0LHQvtGC0LrRgyDQv9C+0LLRgtC+0YDQvdC+0LPQviDQstGL0LfQvtCy0LAgKNGH0YLQvtCx0Ysg0L3QvtCy0L7Qs9C+INCw0L/Qv9C10L3QtNCwINC90LUg0LHRi9C70L4pXG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAgICAgY29uc3QgcmVjZWlwdEJ1aWxkZXIgPSBFbGVtZW50RmFjdG9yeS5idWlsZERpdih7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdpbm5va2Fzc2EtcmVjZWlwdC1idWlsZGVyJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmQocmVjZWlwdEJ1aWxkZXIpO1xuXG4gICAgICAgIGlmICh0aGlzLmNhbkhlYWRlclJlbmRlcikge1xuICAgICAgICAgICAgLy8g0LLRgdGC0LDQstC60LAg0LfQsNCz0L7Qu9C+0LLQutCwXG4gICAgICAgICAgICBFbGVtZW50RmFjdG9yeS5idWlsZChcbiAgICAgICAgICAgICAgICAnaDEnLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6IHRoaXMuZ2V0SGVhZGVyKCksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZWNlaXB0QnVpbGRlcixcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDQstGB0YLQsNCy0LrQsCDRhNC+0YDQvNGLINGH0LXQutCwXG4gICAgICAgIHJlY2VpcHRCdWlsZGVyLmFwcGVuZCh0aGlzLnJlY2VpcHQuZ2V0UmVuZGVyKCkpO1xuXG4gICAgICAgIC8vINCy0YHRgtCw0LLQutCwINC60L3QvtC/0L7QuiBcItCe0YLQv9GA0LDQstC40YLRjFwiINC4IFwi0J7RgtC80LXQvdC40YLRjFwiXG4gICAgICAgIGNvbnN0IHdyYXAgPSBFbGVtZW50RmFjdG9yeS5idWlsZERpdihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICd3cmFwLW91dGVyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWNlaXB0QnVpbGRlcixcbiAgICAgICAgKTtcblxuICAgICAgICBFbGVtZW50RmFjdG9yeS5idWlsZChcbiAgICAgICAgICAgICdidXR0b24nLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2J0bi1zZW5kJyxcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogJ9Ce0YLQv9GA0LDQstC40YLRjCcsXG4gICAgICAgICAgICAgICAgb25jbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5mblNlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm5TZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdyYXAsXG4gICAgICAgICk7XG5cbiAgICAgICAgRWxlbWVudEZhY3RvcnkuYnVpbGQoXG4gICAgICAgICAgICAnYnV0dG9uJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdidG4tY2FuY2VsJyxcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogJ9Ce0YLQvNC10L3QuNGC0YwnLFxuICAgICAgICAgICAgICAgIG9uY2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZm5DbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mbkNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdyYXAsXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g0LLRgdGC0LDQstC60LAg0YPQttC1INGB0YPRidC10YHRgtCy0YPRjtGJ0LjRhSDRh9C10LrQvtCyXG4gICAgICAgIHJlY2VpcHRCdWlsZGVyLmFwcGVuZCh0aGlzLnByaW50YWJsZXMuZ2V0UmVuZGVyKCkpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiQmFzZVJlbmRlcmFibGUiLCJyb290RWxlbWVudCIsImNhbGxiYWNrVXBkYXRlIiwiY2FsbFVwZGF0ZSIsImFyZ3MiLCJnZXRSZW5kZXIiLCJNaXNzaW5nUHJvcEV4Y2VwdGlvbiIsIkVsZW1lbnRGYWN0b3J5Iiwic3RhdGljIiwidGFnIiwicGFyZW50Iiwia2V5cyIsImZvckVhY2giLCJhcHBlbmQiLCJidWlsZCIsImNoaWxkcyIsInNlbGVjdCIsIk5vdEltcGxlbWVudGVkRXhjZXB0aW9uIiwiQmFzZUF0b20iLCJ2YWx1ZSIsImdldERlc2MiLCJpbmNsdWRlcyIsImN1cnJWYWx1ZSIsImVudHJpZXMiLCJ0ZXh0Q29udGVudCIsInNlbGVjdGVkIiwicGFyc2VJbnQiLCJidWlsZFNlbGVjdCIsImNsYXNzTmFtZSIsIm9uY2hhbmdlIiwiUGF5bWVudE1ldGhvZCIsIlJlY2VpcHRJdGVtVHlwZSIsIlZhdCIsIlJlY2VpcHRJdGVtIiwiY29uc3RydWN0b3IiLCJzdXBlciIsInR5cGUiLCJuYW1lIiwicHJpY2UiLCJxdWFudGl0eSIsInZhdCIsInBheW1lbnRNZXRob2QiLCJpbnB1dHMiLCJzZXRUeXBlIiwiZ2V0VHlwZSIsInNldE5hbWUiLCJnZXROYW1lIiwic2V0UHJpY2UiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsImdldFByaWNlIiwic2V0UXVhbnRpdHkiLCJnZXRRdWFudGl0eSIsImdldEFtb3VudCIsInNldFZhdCIsImdldFZhdCIsInNldFBheW1lbnRNZXRob2QiLCJnZXRQYXltZW50TWV0aG9kIiwic2VsZiIsInBvcyIsImJ1aWxkRGl2IiwibGluZTEiLCJpbnB1dE5hbWUiLCJidWlsZElucHV0IiwidGl0bGUiLCJwbGFjZWhvbGRlciIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsInJlcXVpcmVkIiwibGluZTIiLCJpbnB1dFByaWNlIiwic3RlcCIsImlucHV0UXVhbnRpdHkiLCJsaW5lMyIsImdldFJhd09iamVjdCIsImFtb3VudCIsInBheW1lbnRfbWV0aG9kIiwicmVwb3J0VmFsaWRpdHkiLCJ2YWxpZGl0eSIsIlJlY2VpcFR5cGUiLCJSZWNlaXB0U3ViVHlwZSIsIkludmFsaWRBcmd1bWVudEV4Y2VwdGlvbiIsIlByaW50YWJsZSIsInV1aWQiLCJocmVmIiwic3ViVHlwZSIsImRhdGUiLCJzZXRMaW5rIiwic2V0U3ViVHlwZSIsImlzVmFsaWQiLCJzZXRBbW91bnQiLCJzZXREYXRlIiwibGluZSIsIkJhc2VDb2xsZWN0aW9uIiwic3Ryb2FnZSIsIk1hcCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29udHJvbFR5cGUiLCJhZGQiLCJzZXQiLCJkZWxldGUiLCJzaXplIiwiZGl2IiwiUmVjZWlwdEl0ZW1Db2xsZWN0aW9uIiwiYW1vdW50TGluZSIsInBvc2l0aW9ucyIsImZuQW1vdW50VXBkYXRlIiwiZm5BZGRJdGVtIiwib25jbGljayIsImdldFJhd0FycmF5IiwicmF3IiwiUmVjZWlwdCIsIml0ZW1zIiwiZW1haWwiLCJwaG9uZSIsIm9yZGVySWQiLCJzZXRPcmRlcklkIiwiZ2V0T3JkZXJJZCIsImdldEl0ZW1zIiwic2V0RW1haWwiLCJnZXRFbWFpbCIsInNldFBob25lIiwiZ2V0UGhvbmUiLCJnZXRSZW5kZXJDb250YWN0cyIsImNvbnRhY3RzIiwiUHJpbnRhYmxlQ29sbGVjdGlvbiIsImdldEJhbGFuY2UiLCJiYWxhbmNlIiwiaDIiLCJwcmVwZW5kIiwiaW5ub2thc3NhIiwiUmVjZWlwdEJ1aWxkZXIiLCJyZWNlaXB0VHlwZSIsImNhbkhlYWRlclJlbmRlciIsIkhUTUxFbGVtZW50IiwicmVjZWlwdCIsInByaW50YWJsZXMiLCJmblNlbmQiLCJmbkNsb3NlIiwiZ2V0UmVjZWlwdCIsImdldFByaW50YWJsZXMiLCJnZXRIZWFkZXIiLCJzZXRDYWxsYmFja1NlbmQiLCJmbiIsInNldENhbGxiYWNrQ2xvc2UiLCJyZW5kZXIiLCJpbm5lckhUTUwiLCJyZWNlaXB0QnVpbGRlciIsIndyYXAiXSwic291cmNlUm9vdCI6IiJ9