(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>o});var i=n(537),r=n.n(i),s=n(645),a=n.n(s)()(r());a.push([e.id,'\n.innokassa-receipt-builder {\n    border: 1px solid #aaa;\n    width: 100%;\n    margin: auto;\n    background-color: #fff;\n    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;\n    border-bottom: 1px solid #ccc;\n    padding-bottom: 10px;\n}\n\n/**/\n\n.innokassa-receipt-builder .wrap-outer {\n    padding: 10px 15px;\n}\n\n.innokassa-receipt-builder .wrap-dummy {\n    margin-top: 10px;\n}\n\n/**/\n\n.innokassa-receipt-builder h1 {\n    font-size: 24px;\n    background-color: rgba(0,0,0,0.1);\n    text-align: center;\n    padding: 10px 2px;\n    margin: 0px;\n}\n\n.innokassa-receipt-builder h2 {\n    font-size: 20px;\n    background-color: rgba(0,0,0,0.05);\n    text-align: center;\n    padding: 5px 2px;\n    margin: 0px;\n}\n\n/**/\n\n.innokassa-receipt-builder label {\n    color: #777;\n}\n\n.innokassa-receipt-builder select {\n    border-radius: 0;\n    border: 0;\n    border: 1px solid #aaa;\n    background-color: rgba(255,255,255,0.7);\n}\n\n.innokassa-receipt-builder input {\n    border: 1px solid #aaa;\n}\n\n.innokassa-receipt-builder input.name {\n    width: 100%;\n}\n\n.innokassa-receipt-builder input.price {\n    width: 96px;\n}\n\n.innokassa-receipt-builder input.quantity {\n    width: 64px;\n}\n\n.innokassa-receipt-builder button.btn-send, .innokassa-receipt-builder button.btn-cancel {\n    padding: 5px 10px;\n    margin-right: 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.innokassa-receipt-builder button.btn-send {\n    background-color: #1abc9c;\n}\n\n.innokassa-receipt-builder button.btn-cancel {\n    background-color: #ecf0f1;\n}\n\n/**/\n\n.innokassa-receipt-builder .line, .line-printable, .line-summary {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n    justify-content: space-between;\n    margin-top: 5px;\n}\n\n.innokassa-receipt-builder .line-printable {\n    font-size: 14px;\n}\n\n.innokassa-receipt-builder .line-summary {\n    align-items: flex-end;\n    justify-content: flex-end;\n}\n\n/**/\n\n.innokassa-receipt-builder .positions {\n    background-color: rgba(0,0,0,0.01);\n}\n\n.innokassa-receipt-builder .position {\n    margin: 5px 0;\n    padding: 20px 0 5px 0;\n    background-color: rgba(0,0,0,0.05);\n}\n\n.innokassa-receipt-builder .btn-remove {\n    cursor: pointer;\n    background-color: rgba(0,0,0,0.1);\n    font-size: 16px;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    position: relative;\n    left: 3px;\n    top: 28px;\n    margin-top: -20px;\n}\n\n.innokassa-receipt-builder .btn-add {\n    cursor: pointer;\n    background-color: rgba(0,0,0,0.15);\n    font-size: 16px;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    top: 28px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:";AACA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,wDAAwD;IACxD,6BAA6B;IAC7B,oBAAoB;AACxB;;AAEA,GAAG;;AAEH;IACI,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;AACpB;;AAEA,GAAG;;AAEH;IACI,eAAe;IACf,iCAAiC;IACjC,kBAAkB;IAClB,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,eAAe;IACf,kCAAkC;IAClC,kBAAkB;IAClB,gBAAgB;IAChB,WAAW;AACf;;AAEA,GAAG;;AAEH;IACI,WAAW;AACf;;AAEA;IACI,gBAAgB;IAChB,SAAS;IACT,sBAAsB;IACtB,uCAAuC;AAC3C;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA,GAAG;;AAEH;IACI,aAAa;IACb,mBAAmB;IACnB,qBAAqB;IACrB,8BAA8B;IAC9B,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,yBAAyB;AAC7B;;AAEA,GAAG;;AAEH;IACI,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,kCAAkC;AACtC;;AAEA;IACI,eAAe;IACf,iCAAiC;IACjC,eAAe;IACf,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,SAAS;IACT,SAAS;IACT,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,kCAAkC;IAClC,eAAe;IACf,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,SAAS;AACb",sourcesContent:['\n.innokassa-receipt-builder {\n    border: 1px solid #aaa;\n    width: 100%;\n    margin: auto;\n    background-color: #fff;\n    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;\n    border-bottom: 1px solid #ccc;\n    padding-bottom: 10px;\n}\n\n/**/\n\n.innokassa-receipt-builder .wrap-outer {\n    padding: 10px 15px;\n}\n\n.innokassa-receipt-builder .wrap-dummy {\n    margin-top: 10px;\n}\n\n/**/\n\n.innokassa-receipt-builder h1 {\n    font-size: 24px;\n    background-color: rgba(0,0,0,0.1);\n    text-align: center;\n    padding: 10px 2px;\n    margin: 0px;\n}\n\n.innokassa-receipt-builder h2 {\n    font-size: 20px;\n    background-color: rgba(0,0,0,0.05);\n    text-align: center;\n    padding: 5px 2px;\n    margin: 0px;\n}\n\n/**/\n\n.innokassa-receipt-builder label {\n    color: #777;\n}\n\n.innokassa-receipt-builder select {\n    border-radius: 0;\n    border: 0;\n    border: 1px solid #aaa;\n    background-color: rgba(255,255,255,0.7);\n}\n\n.innokassa-receipt-builder input {\n    border: 1px solid #aaa;\n}\n\n.innokassa-receipt-builder input.name {\n    width: 100%;\n}\n\n.innokassa-receipt-builder input.price {\n    width: 96px;\n}\n\n.innokassa-receipt-builder input.quantity {\n    width: 64px;\n}\n\n.innokassa-receipt-builder button.btn-send, .innokassa-receipt-builder button.btn-cancel {\n    padding: 5px 10px;\n    margin-right: 10px;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.innokassa-receipt-builder button.btn-send {\n    background-color: #1abc9c;\n}\n\n.innokassa-receipt-builder button.btn-cancel {\n    background-color: #ecf0f1;\n}\n\n/**/\n\n.innokassa-receipt-builder .line, .line-printable, .line-summary {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n    justify-content: space-between;\n    margin-top: 5px;\n}\n\n.innokassa-receipt-builder .line-printable {\n    font-size: 14px;\n}\n\n.innokassa-receipt-builder .line-summary {\n    align-items: flex-end;\n    justify-content: flex-end;\n}\n\n/**/\n\n.innokassa-receipt-builder .positions {\n    background-color: rgba(0,0,0,0.01);\n}\n\n.innokassa-receipt-builder .position {\n    margin: 5px 0;\n    padding: 20px 0 5px 0;\n    background-color: rgba(0,0,0,0.05);\n}\n\n.innokassa-receipt-builder .btn-remove {\n    cursor: pointer;\n    background-color: rgba(0,0,0,0.1);\n    font-size: 16px;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    position: relative;\n    left: 3px;\n    top: 28px;\n    margin-top: -20px;\n}\n\n.innokassa-receipt-builder .btn-add {\n    cursor: pointer;\n    background-color: rgba(0,0,0,0.15);\n    font-size: 16px;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    top: 28px;\n}\n'],sourceRoot:""}]);const o=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,r,s){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(i)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);i&&a[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(r," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var s={},a=[],o=0;o<e.length;o++){var l=e[o],c=i.base?l[0]+i.base:l[0],u=s[c]||0,p="".concat(c," ").concat(u);s[c]=u+1;var d=n(p),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(A);else{var h=r(A,i);i.byIndex=o,t.splice(o,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var s=i(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<s.length;a++){var o=n(s[a]);t[o].references--}for(var l=i(e,r),c=0;c<s.length;c++){var u=n(s[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}s=l}}},569:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{class e{rootElement=null;callbackUpdate=null;remove(){this.rootElement.remove(),this.rootElement=null}callUpdate(...e){this.callbackUpdate&&this.callbackUpdate(...e)}getRender(e=null){return e&&(this.callbackUpdate=e),null}}class t extends Error{}class i{static build(e,n,i=null){const r=document.createElement(e);return n&&Object.keys(n).forEach((e=>{if(!(e in r))throw new t(`missing prop "${e}" into ${r}`);r[e]=n[e]})),i&&i.append(r),r}static buildDiv(e,t=null){return i.build("div",e,t)}static buildInput(e,t=null){return i.build("input",e,t)}static buildSelect(e,t=null,n=null){const r=i.build("select",e,n);return t&&t.forEach((e=>{i.build("option",e,r)})),r}}class r extends Error{}class s{static isValid(e){return Object.keys(this.getDesc()).includes(`${e}`)}static getDesc(){throw new r}static getRender(e,t,n=null){const r=[],s=this.getDesc();Object.entries(s).forEach((([t,n])=>{r.push({value:t,textContent:n,selected:e===parseInt(t,10)})}));const a=i.buildSelect({className:"select",onchange:()=>{t(a.value)}},r,n);return a}}class a extends s{static getDesc(){return{1:"Предоплата 100%",2:"Предоплата",3:"Аванс",4:"Полный расчет",5:"Частичный расчет и кредит",6:"Передача в кредит",7:"Оплата кредита"}}}class o extends s{static getDesc(){return{1:"Товар",3:"Работа",4:"Услуга",10:"Платеж"}}}class l extends s{static getDesc(){return{1:"НДС 20%",2:"НДС 10%",3:"НДС 20/120",4:"НДС 10/110",5:"НДС 0%",6:"НДС не облагается"}}}class c extends e{constructor(){super(),this.type=1,this.name="Название товара",this.price=1e3,this.quantity=1,this.vat=6,this.paymentMethod=4,this.inputs=[]}setType(e){return this.type=e,this}getType(){return this}setName(e){return this.name=e,this}getName(){return this.name}setPrice(e){return this.price=parseFloat(e).toFixed(2),this}getPrice(){return this.price}setQuantity(e){return this.quantity=parseFloat(e).toFixed(3),this}getQuantity(){return this.quantity}getAmount(){return parseFloat(this.price+this.quantity).toFixed(2)}setVat(e){return this.vat=e,this}getVat(){return this}setPaymentMethod(e){return this.paymentMethod=e,this}getPaymentMethod(){return this.paymentMethod}getRender(e=null){super.getRender(e);const t=this,n=i.buildDiv({className:"position"}),r=i.buildDiv({className:"line"},n);this.inputName=i.buildInput({className:"name",title:"Название позиции",placeholder:"Название позиции",minLength:1,maxLength:128,required:!0,type:"text",value:this.name,onchange:()=>{t.setName(t.inputName.value)}},r),this.inputs.push(this.inputName);const s=i.buildDiv({className:"line"},n);this.inputPrice=i.buildInput({className:"price",title:"Цена за единицу товара",placeholder:"Цена",type:"number",required:!0,step:"0.01",value:this.price,onchange:()=>{t.setPrice(t.inputPrice.value),t.callUpdate()}},s),this.inputs.push(this.inputPrice),this.inputQuantity=i.buildInput({className:"quantity",title:"Количество предметов",placeholder:"Кол-во",type:"number",required:!0,step:"0.01",value:this.quantity,onchange:()=>{t.setQuantity(t.inputQuantity.value),t.callUpdate()}},s),this.inputs.push(this.inputQuantity),l.getRender(this.vat,(e=>{t.setVat(e)}),s);const c=i.buildDiv({className:"line"},n);return a.getRender(this.paymentMethod,(e=>{t.setPaymentMethod(e)}),c),o.getRender(this.type,(e=>{t.setType(e)}),c),this.rootElement=n,this.rootElement}getRawObject(){return{type:this.type,name:this.name,price:this.price,quantity:this.quantity,amount:this.getAmount(),vat:this.vat,payment_method:this.paymentMethod}}reportValidity(){let e=!0;return this.inputs.forEach((t=>{t.reportValidity()||(e=!1)})),e}}class u extends s{static getDesc(){return{1:"Приход",2:"Возврат прихода",3:"Расход",4:"Возврат расхода"}}}class p extends s{static getDesc(){return{0:"Ручной чек",1:"Предоплата",2:"Полный расчет"}}}class d extends Error{}class A extends e{constructor(){super(),this.uuid="",this.href="",this.type=1,this.subType=1,this.amount=0,this.date=""}setLink(e,t){return this.uuid=e,this.href=t,this}setType(e){if(!u.isValid(e))throw new d(`excpected ${Object.keys(u.getDesc()).join(", ")}, but get ${e}`);return this.type=e,this}getType(){return this.type}setSubType(e){if(!p.isValid(e))throw new d(`expected ${Object.keys(p.getDesc()).join(", ")}, but get ${e}`);return this.subType=e,this}getSubType(){return this.subType}setAmount(e){return this.amount=e,this}getAmount(){return this.amount}getRender(e=null){super.getRender(e);const t=i.buildDiv({className:"line-printable"});return i.build("a",{className:"receipt-link",textContent:this.uuid,href:this.href,target:"blank"},t),i.buildDiv({textContent:`${u.getDesc()[this.type]} / ${p.getDesc()[this.subType]}`},t),i.buildDiv({textContent:`${this.amount} руб.`},t),this.rootElement=t,this.rootElement}}class h extends e{static id=0;stroage=new Map;[Symbol.iterator](){return this.stroage.entries()}controlType(e){throw new r}add(e){this.controlType(e);const{id:t}=h;return this.stroage.set(t,e),h.id+=1,t}remove(e){this.stroage.delete(e)}get(e){return this.stroage.get(e)}size(){return this.stroage.size}getRender(){const e=i.buildDiv({className:"wrap-outer"});return this.stroage.forEach((t=>{e.append(t.getRender())})),e}}class b extends h{controlType(e){if(!(e instanceof c))throw new d}getAmount(){let e=0;return this.stroage.forEach((t=>{e+=t.getPrice()*t.getQuantity()})),parseFloat(e).toFixed(2)}getRender(e=null){super.getRender(e),this.rootElement=i.buildDiv({className:"wrap-dummy"}),i.build("h2",{className:"",textContent:"Список позиций"},this.rootElement);const t=i.buildDiv({className:"line-summary"},this.rootElement);i.build("label",{className:"label",textContent:"Сумма:"},t);const n=i.build("label",{className:"label",textContent:this.getAmount()},t),r=i.buildDiv({className:"positions"},this.rootElement),s=this,a=()=>{n.textContent=s.getAmount()},o=(e,t)=>{const n=i.buildDiv({className:"btn-remove",textContent:"×",onclick:()=>{s.stroage.delete(e),n.remove(),t.remove(),a()}},r);r.append(t.getRender(a))};return this.stroage.forEach(((e,t)=>{o(t,e)})),i.buildDiv({className:"btn-add",textContent:"+",onclick:()=>{const e=s.add(new c),t=s.stroage.get(e);o(e,t),a()}},this.rootElement),this.rootElement}getRawArray(){const e=[];return this.stroage.forEach((t=>{e.push(t.getRawObject())})),e}reportValidity(){let e=!0;return this.stroage.forEach((t=>{t.reportValidity()||(e=!1)})),e}}class m extends e{constructor(){super(),this.items=new b,this.email="",this.phone="",this.type=1,this.orderId="0",this.inputs=[]}setOrderId(e){return this.orderId=e,this}getOrderId(){return this.orderId}setType(e){if(!u.isValid(e))throw new d(`excpected ${Object.keys(u.getDesc()).join(", ")}, but get ${e}`);return this.type=e,this}getType(){return this.type}getItems(){return this.items}setEmail(e){return this.email=e,this}getEmail(){return this.email}setPhone(e){return this.phone=e,this}getPhone(){return this.phone}getRenderContacts(){const e=i.buildDiv({className:"wrap-dummy"}),t=i.buildDiv({className:"line"},e);i.build("label",{className:"label",textContent:"Email:"},t);const n=i.buildInput({className:"input",type:"email",required:!0,placeholder:"box@domain.zone",value:this.email,onchange:()=>{this.setEmail(n.value)}},t);this.inputs.push(n);const r=i.buildDiv({className:"line"},e);i.build("label",{className:"label",textContent:"Телефон:"},r);const s=i.buildInput({className:"input",type:"tel",required:!0,placeholder:"+7-123-456-78-99",minLength:10,maxLength:15,value:this.phone,onchange:()=>{this.setPhone(s.value)}},r);return this.inputs.push(s),e}getRender(e=null){super.getRender(e);const t=i.buildDiv({className:"wrap-outer"});return this.rootElement=t,t.append(this.getRenderContacts()),t.append(this.items.getRender()),this.rootElement}getRawObject(){return{type:this.type,email:this.email,phone:this.phone,items:this.items.getRawArray()}}reportValidity(){let e=!0;return this.inputs.forEach((t=>{t.reportValidity()||(e=!1)})),e?this.items.reportValidity():e}}class g extends h{controlType(e){if(!(e instanceof A))throw new d}getBalance(){let e=0;return this.stroage.forEach((t=>{1===t.getType()?e+=t.getAmount():2===t.getType()&&(e-=t.getAmount())})),parseFloat(e).toFixed(2)}getRender(e=null){super.getRender(e),this.rootElement=super.getRender();const t=i.buildDiv({className:"line-summary"},this.rootElement);i.build("label",{className:"label",textContent:"Баланс:"},t),i.build("label",{className:"label",textContent:this.getBalance()},t);const n=i.build("h2",{className:"",textContent:"Все чеки заказа"});return this.rootElement.prepend(n),this.rootElement}}var f=n(379),x=n.n(f),C=n(795),y=n.n(C),k=n(569),I=n.n(k),v=n(565),B=n.n(v),E=n(216),w=n.n(E),N=n(589),R=n.n(N),D=n(426),T={};T.styleTagTransform=R(),T.setAttributes=B(),T.insert=I().bind(null,"head"),T.domAPI=y(),T.insertStyleElement=w(),x()(D.Z,T),D.Z&&D.Z.locals&&D.Z.locals,window.innokassa={ReceiptBuilder:class{constructor({element:e,receiptType:t=1,canHeaderRender:n=!0}){if(!(e instanceof HTMLElement))throw new d;this.element=e,this.receipt=new m,this.receipt.setType(t),this.printables=new g,this.fnSend=null,this.fnClose=null,this.canHeaderRender=n}getReceipt(){return this.receipt}getPrintables(){return this.printables}getHeader(){return`Новый чек ${1===this.receipt.getType()?"прихода":"возврата"} заказа #${this.receipt.getOrderId()}`}setCallbackSend(e){return this.fnSend=e,this}setCallbackClose(e){return this.fnClose=e,this}render(){this.element.innerHTML="";const e=i.buildDiv({className:"innokassa-receipt-builder"});this.element.append(e),this.canHeaderRender&&i.build("h1",{className:"",textContent:this.getHeader()},e),e.append(this.receipt.getRender());const t=i.buildDiv({className:"wrap-outer"},e);i.build("button",{className:"btn-send",textContent:"Отправить",onclick:()=>{this.fnSend&&this.fnSend()}},t),i.build("button",{className:"btn-cancel",textContent:"Отменить",onclick:()=>{this.fnClose&&this.fnClose()}},t),e.append(this.printables.getRender())}},ReceiptItem:c,Printable:A}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,